{
  "address": "0x654E8e99AEe71c1fe116CA6413e857D3230fD3E1",
  "abi": [
    {
      "inputs": [],
      "name": "conditionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokensParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "parentOutcome",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "parentMarket",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "encodedQuestions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuestionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_upperBound",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Market.ConditionalTokensParams",
          "name": "_conditionalTokensParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            }
          ],
          "internalType": "struct Market.RealityParams",
          "name": "_realityParams",
          "type": "tuple"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowerBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOutcomes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outcomes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentCollectionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentOutcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "questionsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb1925aa0375f8c7c3a917b7f98d1a27465749e26334b0f48e43170661a2ddc8",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x654E8e99AEe71c1fe116CA6413e857D3230fD3E1",
    "transactionIndex": 1,
    "gasUsed": "746204",
    "logsBloom": "0x
    "blockHash": "0xca6a7a6839a80e2e547555f396753b0321cc1dd66b1ea635aabb7210eb3b0703",
    "transactionHash": "0xfb1925aa0375f8c7c3a917b7f98d1a27465749e26334b0f48e43170661a2ddc8",
    "logs": [],
    "blockNumber": 35756307,
    "cumulativeGasUsed": "1054433",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "65df141202f1bca32209c0938ac7838b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"conditionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokensParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"encodedQuestions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuestionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperBound\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Market.ConditionalTokensParams\",\"name\":\"_conditionalTokensParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"}],\"internalType\":\"struct Market.RealityParams\",\"name\":\"_realityParams\",\"type\":\"tuple\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOutcomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outcomes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentCollectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"questionsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"conditionId()\":{\"details\":\"Conditional Tokens conditionId\"},\"encodedQuestions(uint256)\":{\"details\":\"Encoded questions parameters, needed to create and reopen a question\"},\"getQuestionsCount()\":{\"details\":\"Multi Scalar markets have one question for each outcome, while any other market has only one question.\",\"returns\":{\"_0\":\"questionsCount The number of Reality questions of this market\"}},\"initialize(string,string[],uint256,uint256,(bytes32,bytes32,uint256,address,bytes32),(bytes32[],uint256,string[]),address)\":{\"details\":\"Initializer\",\"params\":{\"_conditionalTokensParams\":\"Conditional Tokens params\",\"_lowerBound\":\"Lower bound, only used for scalar markets\",\"_marketName\":\"The name of the market\",\"_outcomes\":\"The market outcomes, doesn't include the INVALID_RESULT outcome\",\"_realityParams\":\"Reality params\",\"_realityProxy\":\"Oracle contract\",\"_upperBound\":\"Upper bound, only user for scalar markets\"}},\"numOutcomes()\":{\"details\":\"Returns the number of outcomes. Doesn't include the INVALID_RESULT outcome.\",\"returns\":{\"_0\":\"numOutcomes The number of outcomes\"}},\"parentCollectionId()\":{\"details\":\"Conditional Tokens parentCollectionId\"},\"parentMarket()\":{\"details\":\"The parent market (optional). This market redeems to an outcome token of the parent market.\"},\"parentOutcome()\":{\"details\":\"The parent outcome (optional). The parent market's outcome token this market redeems for.\"},\"questionId()\":{\"details\":\"Conditional Tokens questionId\"},\"questionsIds(uint256)\":{\"details\":\"Multi scalar markets have two or more questions, the other market types have 1\",\"returns\":{\"_0\":\"Array of question ids.\"}},\"resolve()\":{\"details\":\"Helper function to resolve the market\"},\"templateId()\":{\"details\":\"The templateId associated to the Reality question\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        uint256 max_previous\\n    ) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dd1ae365738a869e5eaca1d0203ee76a763a21b77a96942fc50e1c3ee478bd5\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    struct RealityParams {\\n        bytes32[] questionsIds; // Reality questions ids\\n        uint256 templateId; // Reality templateId\\n        string[] encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    }\\n\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        bytes32 parentCollectionId; // Conditional Tokens parentCollectionId\\n        uint256 parentOutcome; // conditional outcome to use (optional)\\n        address parentMarket; // conditional market to use (optional)\\n        bytes32 questionId; // Conditional Tokens questionId\\n    }\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    ConditionalTokensParams public conditionalTokensParams; // Conditional Tokens parameters\\n    RealityParams public realityParams; // Reality parameters\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionalTokensParams Conditional Tokens params\\n    /// @param _realityParams Reality params\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Multi scalar markets have two or more questions, the other market types have 1\\n    /// @return Array of question ids.\\n    function questionsIds(uint256 index) external view returns (bytes32) {\\n        return realityParams.questionsIds[index];\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question\\n    function encodedQuestions(\\n        uint256 index\\n    ) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return questionsCount The number of Reality questions of this market\\n    function getQuestionsCount() external view returns (uint256) {\\n        return realityParams.questionsIds.length;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x8ab64b490607693fd78543378a63f5fd76426206809206b507c3d06b7e19f12a\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param market Market to resolve\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param market Market to resolve\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param market Market to resolve\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param market Market to resolve\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0xd693465b76e19661b45493dc8dfbf14ede0267be0f34079dd5dfe694d9bcc07f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c88806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638767d64e116100ad578063c2e112d211610071578063c2e112d214610224578063d03ecc641461022c578063da2da66f1461023d578063e6bfd26a14610291578063eed2a1471461029957600080fd5b80638767d64e146101ef57806395744274146101f7578063a384d6ff1461020a578063b06a5c5214610213578063b09ad8a01461021b57600080fd5b80632ff8d504116100f45780632ff8d50414610197578063369b4f52146101c25780633eaac0b8146101cc57806344bea37e146101df5780637aa77f29146101e757600080fd5b80630d0e932b14610131578063158ef93e146101485780632810e1d614610165578063292503ba1461016f5780632ddc7de71461018f575b600080fd5b6007545b6040519081526020015b60405180910390f35b6000546101559060ff1681565b604051901515815260200161013f565b61016d6102ac565b005b61018261017d3660046106dc565b61030b565b60405161013f91906106f5565b600554610135565b600d546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b600b546101359081565b61016d6101da3660046109e6565b6103bd565b600654610135565b600b54610135565b600254610135565b6101356102053660046106dc565b6104ed565b61013560035481565b600954610135565b61013560045481565b600a54610135565b6008546001600160a01b03166101aa565b600554600654600754600854600954610260949392916001600160a01b03169085565b604080519586526020860194909452928401919091526001600160a01b03166060830152608082015260a00161013f565b610182610517565b6101826102a73660046106dc565b6105a5565b600d546040516355ea6c4760e01b81523060048201526001600160a01b03909116906355ea6c4790602401600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b50505050565b6060600a600201828154811061032357610323610af4565b90600052602060002001805461033890610b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461036490610b0a565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b50505050509050919050565b60005460ff161561040b5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b60016104178882610b93565b50855161042b9060029060208901906105d0565b5060038590556004849055825160055560208084015160065560408401516007556060840151600880546001600160a01b0319166001600160a01b039092169190911790556080840151600955825180518492600a926104919284929190910190610626565b506020828101516001830155604083015180516104b492600285019201906105d0565b5050600d80546001600160a01b0319166001600160a01b03939093169290921790915550506000805460ff191660011790555050505050565b6000600a600001828154811061050557610505610af4565b90600052602060002001549050919050565b6001805461052490610b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461055090610b0a565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081565b600281815481106105b557600080fd5b90600052602060002001600091509050805461052490610b0a565b828054828255906000526020600020908101928215610616579160200282015b8281111561061657825182906106069082610b93565b50916020019190600101906105f0565b5061062292915061066d565b5090565b828054828255906000526020600020908101928215610661579160200282015b82811115610661578251825591602001919060010190610646565b5061062292915061068a565b80821115610622576000610681828261069f565b5060010161066d565b5b80821115610622576000815560010161068b565b5080546106ab90610b0a565b6000825580601f106106bb575050565b601f0160209004906000526020600020908101906106d9919061068a565b50565b6000602082840312156106ee57600080fd5b5035919050565b600060208083528351808285015260005b8181101561072257858101830151858201604001528201610706565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561077b5761077b610743565b60405290565b60405160a081016001600160401b038111828210171561077b5761077b610743565b604051601f8201601f191681016001600160401b03811182821017156107cb576107cb610743565b604052919050565b600082601f8301126107e457600080fd5b81356001600160401b038111156107fd576107fd610743565b610810601f8201601f19166020016107a3565b81815284602083860101111561082557600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561085b5761085b610743565b5060051b60200190565b600082601f83011261087657600080fd5b8135602061088b61088683610842565b6107a3565b82815260059290921b840181019181810190868411156108aa57600080fd5b8286015b848110156108e95780356001600160401b038111156108cd5760008081fd5b6108db8986838b01016107d3565b8452509183019183016108ae565b509695505050505050565b6001600160a01b03811681146106d957600080fd5b60006060828403121561091b57600080fd5b610923610759565b905081356001600160401b038082111561093c57600080fd5b818401915084601f83011261095057600080fd5b8135602061096061088683610842565b82815260059290921b8401810191818101908884111561097f57600080fd5b948201945b8386101561099d57853582529482019490820190610984565b86525085810135908501525060408401359150808211156109bd57600080fd5b506109ca84828501610865565b60408301525092915050565b80356109e1816108f4565b919050565b6000806000806000806000878903610160811215610a0357600080fd5b88356001600160401b0380821115610a1a57600080fd5b610a268c838d016107d3565b995060208b0135915080821115610a3c57600080fd5b610a488c838d01610865565b985060408b0135975060608b0135965060a0607f1984011215610a6a57600080fd5b610a72610781565b925060808b0135835260a08b0135602084015260c08b0135604084015260e08b01359150610a9f826108f4565b8160608401526101008b013560808401528295506101208b0135925080831115610ac857600080fd5b5050610ad68a828b01610909565b925050610ae661014089016109d6565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610b1e57607f821691505b602082108103610b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b8e57600081815260208120601f850160051c81016020861015610b6b5750805b601f850160051c820191505b81811015610b8a57828155600101610b77565b5050505b505050565b81516001600160401b03811115610bac57610bac610743565b610bc081610bba8454610b0a565b84610b44565b602080601f831160018114610bf55760008415610bdd5750858301515b600019600386901b1c1916600185901b178555610b8a565b600085815260208120601f198616915b82811015610c2457888601518255948401946001909101908401610c05565b5085821015610c425787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212200bac53c2451ef7ac559a2bf08f6638288561f239737812c31cbec42368b860f664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638767d64e116100ad578063c2e112d211610071578063c2e112d214610224578063d03ecc641461022c578063da2da66f1461023d578063e6bfd26a14610291578063eed2a1471461029957600080fd5b80638767d64e146101ef57806395744274146101f7578063a384d6ff1461020a578063b06a5c5214610213578063b09ad8a01461021b57600080fd5b80632ff8d504116100f45780632ff8d50414610197578063369b4f52146101c25780633eaac0b8146101cc57806344bea37e146101df5780637aa77f29146101e757600080fd5b80630d0e932b14610131578063158ef93e146101485780632810e1d614610165578063292503ba1461016f5780632ddc7de71461018f575b600080fd5b6007545b6040519081526020015b60405180910390f35b6000546101559060ff1681565b604051901515815260200161013f565b61016d6102ac565b005b61018261017d3660046106dc565b61030b565b60405161013f91906106f5565b600554610135565b600d546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b600b546101359081565b61016d6101da3660046109e6565b6103bd565b600654610135565b600b54610135565b600254610135565b6101356102053660046106dc565b6104ed565b61013560035481565b600954610135565b61013560045481565b600a54610135565b6008546001600160a01b03166101aa565b600554600654600754600854600954610260949392916001600160a01b03169085565b604080519586526020860194909452928401919091526001600160a01b03166060830152608082015260a00161013f565b610182610517565b6101826102a73660046106dc565b6105a5565b600d546040516355ea6c4760e01b81523060048201526001600160a01b03909116906355ea6c4790602401600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b50505050565b6060600a600201828154811061032357610323610af4565b90600052602060002001805461033890610b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461036490610b0a565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b50505050509050919050565b60005460ff161561040b5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b60016104178882610b93565b50855161042b9060029060208901906105d0565b5060038590556004849055825160055560208084015160065560408401516007556060840151600880546001600160a01b0319166001600160a01b039092169190911790556080840151600955825180518492600a926104919284929190910190610626565b506020828101516001830155604083015180516104b492600285019201906105d0565b5050600d80546001600160a01b0319166001600160a01b03939093169290921790915550506000805460ff191660011790555050505050565b6000600a600001828154811061050557610505610af4565b90600052602060002001549050919050565b6001805461052490610b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461055090610b0a565b801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081565b600281815481106105b557600080fd5b90600052602060002001600091509050805461052490610b0a565b828054828255906000526020600020908101928215610616579160200282015b8281111561061657825182906106069082610b93565b50916020019190600101906105f0565b5061062292915061066d565b5090565b828054828255906000526020600020908101928215610661579160200282015b82811115610661578251825591602001919060010190610646565b5061062292915061068a565b80821115610622576000610681828261069f565b5060010161066d565b5b80821115610622576000815560010161068b565b5080546106ab90610b0a565b6000825580601f106106bb575050565b601f0160209004906000526020600020908101906106d9919061068a565b50565b6000602082840312156106ee57600080fd5b5035919050565b600060208083528351808285015260005b8181101561072257858101830151858201604001528201610706565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561077b5761077b610743565b60405290565b60405160a081016001600160401b038111828210171561077b5761077b610743565b604051601f8201601f191681016001600160401b03811182821017156107cb576107cb610743565b604052919050565b600082601f8301126107e457600080fd5b81356001600160401b038111156107fd576107fd610743565b610810601f8201601f19166020016107a3565b81815284602083860101111561082557600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b0382111561085b5761085b610743565b5060051b60200190565b600082601f83011261087657600080fd5b8135602061088b61088683610842565b6107a3565b82815260059290921b840181019181810190868411156108aa57600080fd5b8286015b848110156108e95780356001600160401b038111156108cd5760008081fd5b6108db8986838b01016107d3565b8452509183019183016108ae565b509695505050505050565b6001600160a01b03811681146106d957600080fd5b60006060828403121561091b57600080fd5b610923610759565b905081356001600160401b038082111561093c57600080fd5b818401915084601f83011261095057600080fd5b8135602061096061088683610842565b82815260059290921b8401810191818101908884111561097f57600080fd5b948201945b8386101561099d57853582529482019490820190610984565b86525085810135908501525060408401359150808211156109bd57600080fd5b506109ca84828501610865565b60408301525092915050565b80356109e1816108f4565b919050565b6000806000806000806000878903610160811215610a0357600080fd5b88356001600160401b0380821115610a1a57600080fd5b610a268c838d016107d3565b995060208b0135915080821115610a3c57600080fd5b610a488c838d01610865565b985060408b0135975060608b0135965060a0607f1984011215610a6a57600080fd5b610a72610781565b925060808b0135835260a08b0135602084015260c08b0135604084015260e08b01359150610a9f826108f4565b8160608401526101008b013560808401528295506101208b0135925080831115610ac857600080fd5b5050610ad68a828b01610909565b925050610ae661014089016109d6565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610b1e57607f821691505b602082108103610b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b8e57600081815260208120601f850160051c81016020861015610b6b5750805b601f850160051c820191505b81811015610b8a57828155600101610b77565b5050505b505050565b81516001600160401b03811115610bac57610bac610743565b610bc081610bba8454610b0a565b84610b44565b602080601f831160018114610bf55760008415610bdd5750858301515b600019600386901b1c1916600185901b178555610b8a565b600085815260208120601f198616915b82811015610c2457888601518255948401946001909101908401610c05565b5085821015610c425787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212200bac53c2451ef7ac559a2bf08f6638288561f239737812c31cbec42368b860f664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "conditionId()": {
        "details": "Conditional Tokens conditionId"
      },
      "encodedQuestions(uint256)": {
        "details": "Encoded questions parameters, needed to create and reopen a question"
      },
      "getQuestionsCount()": {
        "details": "Multi Scalar markets have one question for each outcome, while any other market has only one question.",
        "returns": {
          "_0": "questionsCount The number of Reality questions of this market"
        }
      },
      "initialize(string,string[],uint256,uint256,(bytes32,bytes32,uint256,address,bytes32),(bytes32[],uint256,string[]),address)": {
        "details": "Initializer",
        "params": {
          "_conditionalTokensParams": "Conditional Tokens params",
          "_lowerBound": "Lower bound, only used for scalar markets",
          "_marketName": "The name of the market",
          "_outcomes": "The market outcomes, doesn't include the INVALID_RESULT outcome",
          "_realityParams": "Reality params",
          "_realityProxy": "Oracle contract",
          "_upperBound": "Upper bound, only user for scalar markets"
        }
      },
      "numOutcomes()": {
        "details": "Returns the number of outcomes. Doesn't include the INVALID_RESULT outcome.",
        "returns": {
          "_0": "numOutcomes The number of outcomes"
        }
      },
      "parentCollectionId()": {
        "details": "Conditional Tokens parentCollectionId"
      },
      "parentMarket()": {
        "details": "The parent market (optional). This market redeems to an outcome token of the parent market."
      },
      "parentOutcome()": {
        "details": "The parent outcome (optional). The parent market's outcome token this market redeems for."
      },
      "questionId()": {
        "details": "Conditional Tokens questionId"
      },
      "questionsIds(uint256)": {
        "details": "Multi scalar markets have two or more questions, the other market types have 1",
        "returns": {
          "_0": "Array of question ids."
        }
      },
      "resolve()": {
        "details": "Helper function to resolve the market"
      },
      "templateId()": {
        "details": "The templateId associated to the Reality question"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 885,
        "contract": "src/Market.sol:Market",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 907,
        "contract": "src/Market.sol:Market",
        "label": "marketName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 910,
        "contract": "src/Market.sol:Market",
        "label": "outcomes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 912,
        "contract": "src/Market.sol:Market",
        "label": "lowerBound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "src/Market.sol:Market",
        "label": "upperBound",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 917,
        "contract": "src/Market.sol:Market",
        "label": "conditionalTokensParams",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(ConditionalTokensParams)905_storage"
      },
      {
        "astId": 920,
        "contract": "src/Market.sol:Market",
        "label": "realityParams",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RealityParams)894_storage"
      },
      {
        "astId": 923,
        "contract": "src/Market.sol:Market",
        "label": "realityProxy",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RealityProxy)3385"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3385": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ConditionalTokensParams)905_storage": {
        "encoding": "inplace",
        "label": "struct Market.ConditionalTokensParams",
        "members": [
          {
            "astId": 896,
            "contract": "src/Market.sol:Market",
            "label": "conditionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 898,
            "contract": "src/Market.sol:Market",
            "label": "parentCollectionId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 900,
            "contract": "src/Market.sol:Market",
            "label": "parentOutcome",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 902,
            "contract": "src/Market.sol:Market",
            "label": "parentMarket",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 904,
            "contract": "src/Market.sol:Market",
            "label": "questionId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RealityParams)894_storage": {
        "encoding": "inplace",
        "label": "struct Market.RealityParams",
        "members": [
          {
            "astId": 888,
            "contract": "src/Market.sol:Market",
            "label": "questionsIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 890,
            "contract": "src/Market.sol:Market",
            "label": "templateId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "src/Market.sol:Market",
            "label": "encodedQuestions",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}