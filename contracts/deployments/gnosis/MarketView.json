{
  "address": "0xe81c8B6e1Cf8bC89d362770Ba7C4c5038F162568",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x319676bcb5335bf3cd12b715a9ad16273e52d38e4c4d940a6381f8e627a6c033",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xe81c8B6e1Cf8bC89d362770Ba7C4c5038F162568",
    "transactionIndex": 2,
    "gasUsed": "1465347",
    "logsBloom": "0x
    "blockHash": "0xe2c12be1da17209fab7de03743d676130fa3e9ce4bca91e9899b2c585c20ef11",
    "transactionHash": "0x319676bcb5335bf3cd12b715a9ad16273e52d38e4c4d940a6381f8e627a6c033",
    "logs": [],
    "blockNumber": 35756310,
    "cumulativeGasUsed": "1606339",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 19,
  "solcInputHash": "65df141202f1bca32209c0938ac7838b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract used as a frontend helper. It doesn't have any state-changing function.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        uint256 max_previous\\n    ) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dd1ae365738a869e5eaca1d0203ee76a763a21b77a96942fc50e1c3ee478bd5\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    struct RealityParams {\\n        bytes32[] questionsIds; // Reality questions ids\\n        uint256 templateId; // Reality templateId\\n        string[] encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    }\\n\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        bytes32 parentCollectionId; // Conditional Tokens parentCollectionId\\n        uint256 parentOutcome; // conditional outcome to use (optional)\\n        address parentMarket; // conditional market to use (optional)\\n        bytes32 questionId; // Conditional Tokens questionId\\n    }\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    ConditionalTokensParams public conditionalTokensParams; // Conditional Tokens parameters\\n    RealityParams public realityParams; // Reality parameters\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionalTokensParams Conditional Tokens params\\n    /// @param _realityParams Reality params\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Multi scalar markets have two or more questions, the other market types have 1\\n    /// @return Array of question ids.\\n    function questionsIds(uint256 index) external view returns (bytes32) {\\n        return realityParams.questionsIds[index];\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question\\n    function encodedQuestions(\\n        uint256 index\\n    ) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return questionsCount The number of Reality questions of this market\\n    function getQuestionsCount() external view returns (uint256) {\\n        return realityParams.questionsIds.length;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x8ab64b490607693fd78543378a63f5fd76426206809206b507c3d06b7e19f12a\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n}\\n\\n/// @dev Contract used as a frontend helper. It doesn't have any state-changing function.\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        address parentMarket;\\n        uint256 parentOutcome;\\n        address[] wrappedTokens;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 parentCollectionId;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        Market market\\n    ) public view returns (MarketInfo memory) {\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n\\n        (\\n            string[] memory outcomes,\\n            address[] memory wrappedTokens\\n        ) = getOutcomesAndTokens(\\n                marketFactory,\\n                conditionalTokens,\\n                market,\\n                conditionId,\\n                parentCollectionId\\n            );\\n\\n        (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        ) = getQuestions(market, marketFactory);\\n\\n        return\\n            MarketInfo({\\n                id: address(market),\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                parentMarket: market.parentMarket(),\\n                parentOutcome: market.parentOutcome(),\\n                wrappedTokens: wrappedTokens,\\n                outcomesSupply: IERC20(wrappedTokens[0]).totalSupply(),\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                parentCollectionId: parentCollectionId,\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                questionsIds: questionsIds,\\n                encodedQuestions: encodedQuestions,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getOutcomesAndTokens(\\n        IMarketFactory marketFactory,\\n        IConditionalTokens conditionalTokens,\\n        Market market,\\n        bytes32 conditionId,\\n        bytes32 parentCollectionId\\n    )\\n        internal\\n        view\\n        returns (string[] memory outcomes, address[] memory wrappedTokens)\\n    {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        outcomes = new string[](outcomeSlotCount);\\n\\n        wrappedTokens = new address[](outcomeSlotCount);\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = i == (outcomeSlotCount - 1)\\n                ? \\\"Invalid result\\\"\\n                : market.outcomes(i);\\n\\n            wrappedTokens[i] = address(\\n                marketFactory.wrappedERC20Factory().tokens(\\n                    conditionalTokens.getPositionId(\\n                        marketFactory.collateralToken(),\\n                        conditionalTokens.getCollectionId(\\n                            parentCollectionId,\\n                            conditionId,\\n                            1 << i\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n\\n        return (outcomes, wrappedTokens);\\n    }\\n\\n    function getQuestions(\\n        Market market,\\n        IMarketFactory marketFactory\\n    )\\n        internal\\n        view\\n        returns (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        )\\n    {\\n        questions = new IRealityETH_v3_0.Question[](market.getQuestionsCount());\\n        encodedQuestions = new string[](questions.length);\\n        questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(\\n                    market.questionsIds(i),\\n                    realitio\\n                );\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = market.encodedQuestions(i);\\n            }\\n        }\\n\\n        return (questions, encodedQuestions, questionsIds);\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                Market(allMarkets[j])\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(\\n        bytes32 questionId,\\n        IRealityETH_v3_0 realitio\\n    ) public view returns (bytes32) {\\n        if (\\n            realitio.isFinalized(questionId) &&\\n            realitio.isSettledTooSoon(questionId)\\n        ) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n}\\n\",\"keccak256\":\"0x7f99d3b47a7ba866a768056723bdee89994b51d10344cae9ff5c12ae9a137339\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param market Market to resolve\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param market Market to resolve\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param market Market to resolve\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param market Market to resolve\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0xd693465b76e19661b45493dc8dfbf14ede0267be0f34079dd5dfe694d9bcc07f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061198a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b61005961005436600461120c565b6100b0565b6040516100669190611551565b60405180910390f35b61008261007d36600461120c565b610233565b604051908152602001610066565b6100a361009e3660046115b3565b610395565b60405161006691906115e1565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a919081019061167a565b90506000846001600160401b03811115610136576101366115fb565b60405190808252806020026020018201604052801561016f57816020015b61015c611153565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190611741565b90506000868451116101a75760006101b4565b8684516101b49190611741565b90506000825b828110610224576101e4888783815181106101d7576101d7611754565b6020026020010151610395565b85836101ef8161176a565b94508151811061020157610201611754565b60209081029190910101528015610224578061021c81611783565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906117aa565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906117aa565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038091906117c5565b9050801561038c578093505b505b5090919050565b61039d611153565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040191906117c5565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046791906117de565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd91906117c5565b90506000806104df888589888761091f565b9150915060008060006104f28a8c610d68565b9250925092506040518061022001604052808b6001600160a01b031681526020018b6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057991908101906117fb565b81526020018681526020018b6001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e691906117de565b6001600160a01b031681526020018b6001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065691906117c5565b81526020018581526020018560008151811061067457610674611754565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dd91906117c5565b81526020018b6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074491906117c5565b81526020018b6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906117c5565b81526020018781526020018981526020018b6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e91906117c5565b81526020018b6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088591906117c5565b81526020018481526020018281526020018381526020016000896001600160a01b031663dd34de678c6040518263ffffffff1660e01b81526004016108cc91815260200190565b602060405180830381865afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d91906117c5565b1190529b9a5050505050505050505050565b6060806000866001600160a01b031663d42dc0c2866040518263ffffffff1660e01b815260040161095291815260200190565b602060405180830381865afa15801561096f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099391906117c5565b9050806001600160401b038111156109ad576109ad6115fb565b6040519080825280602002602001820160405280156109e057816020015b60608152602001906001900390816109cb5790505b509250806001600160401b038111156109fb576109fb6115fb565b604051908082528060200260200182016040528015610a24578160200160208202803683370190505b50915060005b81811015610d5c57610a3d600183611741565b8114610ab55760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610a88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab091908101906117fb565b610add565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610aef57610aef611754565b6020026020010181905250886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c91906117de565b6001600160a01b0316634f64b2be896001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb91906117de565b60405163856296f760e01b8152600481018b9052602481018c90526001871b60448201526001600160a01b038e169063856296f790606401602060405180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5491906117c5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc191906117c5565b6040518263ffffffff1660e01b8152600401610cdf91815260200190565b602060405180830381865afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2091906117de565b838281518110610d3257610d32611754565b6001600160a01b039092166020928302919091019091015280610d548161176a565b915050610a2a565b50509550959350505050565b6060806060846001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf91906117c5565b6001600160401b03811115610de657610de66115fb565b604051908082528060200260200182016040528015610e6d57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610e045790505b50925082516001600160401b03811115610e8957610e896115fb565b604051908082528060200260200182016040528015610ebc57816020015b6060815260200190600190039081610ea75790505b50915082516001600160401b03811115610ed857610ed86115fb565b604051908082528060200260200182016040528015610f01578160200160208202803683370190505b5090506000846001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6891906117de565b905060005b845181101561114a5760405163255d109d60e21b815260048101829052610fe9906001600160a01b03891690639574427490602401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe391906117c5565b83610233565b838281518110610ffb57610ffb611754565b602002602001018181525050816001600160a01b03166395addb9084838151811061102857611028611754565b60200260200101516040518263ffffffff1660e01b815260040161104e91815260200190565b61016060405180830381865afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109091906118a2565b8582815181106110a2576110a2611754565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b0388169063292503ba90602401600060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261111a91908101906117fb565b84828151811061112c5761112c611754565b602002602001018190525080806111429061176a565b915050610f6d565b50509250925092565b60405180610220016040528060006001600160a01b03168152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b038116811461120957600080fd5b50565b6000806040838503121561121f57600080fd5b823591506020830135611231816111f4565b809150509250929050565b60005b8381101561125757818101518382015260200161123f565b50506000910152565b6000815180845261127881602086016020860161123c565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156112d757601f198684030189526112c5838351611260565b988401989250908301906001016112a9565b5090979650505050505050565b600081518084526020808501945080840160005b8381101561131d5781516001600160a01b0316875295820195908201906001016112f8565b509495945050505050565b600081518084526020808501945080840160005b8381101561131d57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161133c565b600081518084526020808501945080840160005b8381101561131d578151875295820195908201906001016113f1565b80516001600160a01b031682526000610220602083015181602086015261143682860182611260565b91505060408301518482036040860152611450828261128c565b915050606083015161146d60608601826001600160a01b03169052565b506080830151608085015260a083015184820360a086015261148f82826112e4565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a0808601518783038289015291935091506114f78382611328565b925050506101c0808401518583038287015261151383826113dd565b925050506101e0808401518583038287015261152f838261128c565b92505050610200808401516115478287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156115a657603f1988860301845261159485835161140d565b94509285019290850190600101611578565b5092979650505050505050565b600080604083850312156115c657600080fd5b82356115d1816111f4565b91506020830135611231816111f4565b6020815260006115f4602083018461140d565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715611634576116346115fb565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611662576116626115fb565b604052919050565b8051611675816111f4565b919050565b6000602080838503121561168d57600080fd5b82516001600160401b03808211156116a457600080fd5b818501915085601f8301126116b857600080fd5b8151818111156116ca576116ca6115fb565b8060051b91506116db84830161163a565b81815291830184019184810190888411156116f557600080fd5b938501935b8385101561171f578451925061170f836111f4565b82825293850193908501906116fa565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d61172b565b634e487b7160e01b600052603260045260246000fd5b60006001820161177c5761177c61172b565b5060010190565b6000816117925761179261172b565b506000190190565b8051801515811461167557600080fd5b6000602082840312156117bc57600080fd5b6115f48261179a565b6000602082840312156117d757600080fd5b5051919050565b6000602082840312156117f057600080fd5b81516115f4816111f4565b60006020828403121561180d57600080fd5b81516001600160401b038082111561182457600080fd5b818401915084601f83011261183857600080fd5b81518181111561184a5761184a6115fb565b61185d601f8201601f191660200161163a565b915080825285602082850101111561187457600080fd5b61188581602084016020860161123c565b50949350505050565b805163ffffffff8116811461167557600080fd5b600061016082840312156118b557600080fd5b6118bd611611565b825181526118cd6020840161166a565b60208201526118de6040840161188e565b60408201526118ef6060840161188e565b60608201526119006080840161188e565b608082015261191160a0840161179a565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea26469706673582212209cb37ecf4750bb3aff2557c24813338531f8eb5e0a8a5c1ff5a52cf30861852064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract used as a frontend helper. It doesn't have any state-changing function.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}