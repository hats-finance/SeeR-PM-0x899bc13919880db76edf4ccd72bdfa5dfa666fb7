{
  "address": "0x0427D45906C8E1c156d8e06C1FEfC4584B916d9f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8ec45d8db60883c8da743bf976887247308a69ae7cbf39f2175155c138ad696",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x0427D45906C8E1c156d8e06C1FEfC4584B916d9f",
    "transactionIndex": 1,
    "gasUsed": "1568775",
    "logsBloom": "0x
    "blockHash": "0x944c99f6fe03efd239797de35e0ae390fa687cb158d0f4fa9cb151f7726dbabb",
    "transactionHash": "0xf8ec45d8db60883c8da743bf976887247308a69ae7cbf39f2175155c138ad696",
    "logs": [],
    "blockNumber": 35802865,
    "cumulativeGasUsed": "1698564",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "118cfeee774c45fcd35e24fba3edf158",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract used as a frontend helper. It doesn't have any state-changing function.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        uint256 max_previous\\n    ) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dd1ae365738a869e5eaca1d0203ee76a763a21b77a96942fc50e1c3ee478bd5\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    struct RealityParams {\\n        bytes32[] questionsIds; // Reality questions ids\\n        uint256 templateId; // Reality templateId\\n        string[] encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    }\\n\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        bytes32 parentCollectionId; // Conditional Tokens parentCollectionId\\n        uint256 parentOutcome; // conditional outcome to use (optional)\\n        address parentMarket; // conditional market to use (optional)\\n        bytes32 questionId; // Conditional Tokens questionId\\n    }\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    ConditionalTokensParams public conditionalTokensParams; // Conditional Tokens parameters\\n    RealityParams public realityParams; // Reality parameters\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionalTokensParams Conditional Tokens params\\n    /// @param _realityParams Reality params\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question\\n    function encodedQuestions(\\n        uint256 index\\n    ) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x46514c81ff85bf4e217598e9d1b68d612547a53769a5d5c52bbd50a4368f14df\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n}\\n\\ninterface MarketV1 {\\n    function questionsIds(uint256 index) external view returns (bytes32);\\n\\n    function getQuestionsCount() external view returns (uint256);\\n}\\n\\n/// @dev Contract used as a frontend helper. It doesn't have any state-changing function.\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        address parentMarket;\\n        uint256 parentOutcome;\\n        address[] wrappedTokens;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 parentCollectionId;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        Market market\\n    ) public view returns (MarketInfo memory) {\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        (\\n            bytes32 parentCollectionId,\\n            address parentMarket,\\n            uint256 parentOutcome\\n        ) = getParentParams(market);\\n\\n        (\\n            string[] memory outcomes,\\n            address[] memory wrappedTokens\\n        ) = getOutcomesAndTokens(\\n                marketFactory,\\n                conditionalTokens,\\n                market,\\n                conditionId,\\n                parentCollectionId\\n            );\\n\\n        (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        ) = getQuestions(market, marketFactory);\\n\\n        return\\n            MarketInfo({\\n                id: address(market),\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                parentMarket: parentMarket,\\n                parentOutcome: parentOutcome,\\n                wrappedTokens: wrappedTokens,\\n                outcomesSupply: IERC20(wrappedTokens[0]).totalSupply(),\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                parentCollectionId: parentCollectionId,\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                questionsIds: questionsIds,\\n                encodedQuestions: encodedQuestions,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getOutcomesAndTokens(\\n        IMarketFactory marketFactory,\\n        IConditionalTokens conditionalTokens,\\n        Market market,\\n        bytes32 conditionId,\\n        bytes32 parentCollectionId\\n    )\\n        internal\\n        view\\n        returns (string[] memory outcomes, address[] memory wrappedTokens)\\n    {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        outcomes = new string[](outcomeSlotCount);\\n\\n        wrappedTokens = new address[](outcomeSlotCount);\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = i == (outcomeSlotCount - 1)\\n                ? \\\"Invalid result\\\"\\n                : market.outcomes(i);\\n\\n            wrappedTokens[i] = address(\\n                marketFactory.wrappedERC20Factory().tokens(\\n                    conditionalTokens.getPositionId(\\n                        marketFactory.collateralToken(),\\n                        conditionalTokens.getCollectionId(\\n                            parentCollectionId,\\n                            conditionId,\\n                            1 << i\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n\\n        return (outcomes, wrappedTokens);\\n    }\\n\\n    function getQuestions(\\n        Market market,\\n        IMarketFactory marketFactory\\n    )\\n        internal\\n        view\\n        returns (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        )\\n    {\\n        bytes32[] memory initialQuestionsIds = getQuestionsIds(market);\\n        questions = new IRealityETH_v3_0.Question[](initialQuestionsIds.length);\\n        encodedQuestions = new string[](questions.length);\\n        questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(\\n                    initialQuestionsIds[i],\\n                    realitio\\n                );\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = market.encodedQuestions(i);\\n            }\\n        }\\n\\n        return (questions, encodedQuestions, questionsIds);\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                Market(allMarkets[j])\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(\\n        bytes32 questionId,\\n        IRealityETH_v3_0 realitio\\n    ) public view returns (bytes32) {\\n        if (\\n            realitio.isFinalized(questionId) &&\\n            realitio.isSettledTooSoon(questionId)\\n        ) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n\\n    /// @dev Function to maintain backward compatibility with existing markets that don't support conditional markets.\\n    /// It can be removed when the old MarketFactory is no longer used.\\n    function getParentParams(\\n        Market market\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes32 parentCollectionId,\\n            address parentMarket,\\n            uint256 parentOutcome\\n        )\\n    {\\n        try market.parentCollectionId() returns (bytes32 _parentCollectionId) {\\n            return (\\n                _parentCollectionId,\\n                market.parentMarket(),\\n                market.parentOutcome()\\n            );\\n        } catch {\\n            return (bytes32(0), address(0), 0);\\n        }\\n    }\\n\\n    /// @dev Function to maintain backward compatibility with existing markets.\\n    /// It can be removed when the old MarketFactory is no longer used.\\n    function getQuestionsIds(\\n        Market market\\n    ) internal view returns (bytes32[] memory) {\\n        try market.questionsIds() returns (bytes32[] memory questionsIds) {\\n            return questionsIds;\\n        } catch {\\n            uint256 questionsCount = MarketV1(address(market))\\n                .getQuestionsCount();\\n            bytes32[] memory questionsIds = new bytes32[](questionsCount);\\n            for (uint256 i = 0; i < questionsCount; i++) {\\n                questionsIds[i] = MarketV1(address(market)).questionsIds(i);\\n            }\\n            return questionsIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca0afacdfa58ece52ba10fd1909ff2b8695bec6bd0d0d4be2a71e23eb52f32d8\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        bytes32 conditionId = market.conditionId();\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market,\\n        // this way if an attacker tries to resolve a fake market by changing some value\\n        // its questionId will not match the id of a valid market\\n        bytes32 questionId = keccak256(\\n            abi.encode(questionsIds, outcomeSlotCount, templateId, low, high)\\n        );\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(\\n                questionId,\\n                questionsIds,\\n                outcomeSlotCount - 1\\n            );\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(\\n                questionId,\\n                questionsIds,\\n                outcomeSlotCount - 1\\n            );\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(\\n                questionId,\\n                questionsIds,\\n                outcomeSlotCount - 1\\n            );\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param questionId Conditional Tokens questionId\\n    /// @param questionsIds Reality questions ids\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(\\n            realitio.resultForOnceSettled(questionsIds[0])\\n        );\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param questionId Conditional Tokens questionId\\n    /// @param questionsIds Reality questions ids\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(\\n            realitio.resultForOnceSettled(questionsIds[0])\\n        );\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param questionId Conditional Tokens questionId\\n    /// @param questionsIds Reality questions ids\\n    /// @param low Lower bound\\n    /// @param high Upper bound\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(\\n            realitio.resultForOnceSettled(questionsIds[0])\\n        );\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param questionId Conditional Tokens questionId\\n    /// @param questionsIds Reality questions ids\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(questionsIds[i])\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x043131159bac9c0d869a63fbd7026e941d68dc70baa0d49ed53b0e414316a37d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b69806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b61005961005436600461135e565b6100b0565b60405161006691906116a0565b60405180910390f35b61008261007d36600461135e565b610233565b604051908152602001610066565b6100a361009e366004611702565b610395565b6040516100669190611730565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a91908101906117e7565b90506000846001600160401b038111156101365761013661174a565b60405190808252806020026020018201604052801561016f57816020015b61015c6112a5565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b600060018351610194919061189b565b90506000868451116101a75760006101b4565b8684516101b4919061189b565b90506000825b828110610224576101e4888783815181106101d7576101d76118ae565b6020026020010151610395565b85836101ef816118c4565b945081518110610201576102016118ae565b60209081029190910101528015610224578061021c816118dd565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f9190611904565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190611904565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610380919061191f565b9050801561038c578093505b505b5090919050565b61039d6112a5565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610401919061191f565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190611938565b905060008060006104778761080d565b92509250925060008061048d8a878b8a89610952565b9150915060008060006104a08c8e610d9b565b9250925092506040518061022001604052808d6001600160a01b031681526020018d6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105279190810190611955565b8152602001868152602001886001600160a01b0316815260200187815260200185815260200185600081518110610560576105606118ae565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c9919061191f565b81526020018d6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610630919061191f565b81526020018d6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610697919061191f565b81526020018981526020018b81526020018d6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a919061191f565b81526020018d6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610771919061191f565b815260200184815260200182815260200183815260200160008b6001600160a01b031663dd34de678e6040518263ffffffff1660e01b81526004016107b891815260200190565b602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f9919061191f565b1190529d9c50505050505050505050505050565b6000806000836001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561086c575060408051601f3d908101601f191682019092526108699181019061191f565b60015b61087e5750600091508190508061094b565b80856001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e19190611938565b866001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610943919061191f565b935093509350505b9193909250565b6060806000866001600160a01b031663d42dc0c2866040518263ffffffff1660e01b815260040161098591815260200190565b602060405180830381865afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c6919061191f565b9050806001600160401b038111156109e0576109e061174a565b604051908082528060200260200182016040528015610a1357816020015b60608152602001906001900390816109fe5790505b509250806001600160401b03811115610a2e57610a2e61174a565b604051908082528060200260200182016040528015610a57578160200160208202803683370190505b50915060005b81811015610d8f57610a7060018361189b565b8114610ae85760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610abb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae39190810190611955565b610b10565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610b2257610b226118ae565b6020026020010181905250886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8f9190611938565b6001600160a01b0316634f64b2be896001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e9190611938565b60405163856296f760e01b8152600481018b9052602481018c90526001871b60448201526001600160a01b038e169063856296f790606401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061191f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf4919061191f565b6040518263ffffffff1660e01b8152600401610d1291815260200190565b602060405180830381865afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d539190611938565b838281518110610d6557610d656118ae565b6001600160a01b039092166020928302919091019091015280610d87816118c4565b915050610a5d565b50509550959350505050565b60608060606000610dab866110e4565b905080516001600160401b03811115610dc657610dc661174a565b604051908082528060200260200182016040528015610e4d57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610de45790505b50935083516001600160401b03811115610e6957610e6961174a565b604051908082528060200260200182016040528015610e9c57816020015b6060815260200190600190039081610e875790505b50925083516001600160401b03811115610eb857610eb861174a565b604051908082528060200260200182016040528015610ee1578160200160208202803683370190505b5091506000856001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f489190611938565b905060005b85518110156110da57610f79838281518110610f6b57610f6b6118ae565b602002602001015183610233565b848281518110610f8b57610f8b6118ae565b602002602001018181525050816001600160a01b03166395addb90858381518110610fb857610fb86118ae565b60200260200101516040518263ffffffff1660e01b8152600401610fde91815260200190565b61016060405180830381865afa158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102091906119fc565b868281518110611032576110326118ae565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b0389169063292503ba90602401600060405180830381865afa158015611082573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110aa9190810190611955565b8582815181106110bc576110bc6118ae565b602002602001018190525080806110d2906118c4565b915050610f4d565b5050509250925092565b6060816001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561114557506040513d6000823e601f3d908101601f191682016040526111429190810190611aae565b60015b61022d576000826001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ad919061191f565b90506000816001600160401b038111156111c9576111c961174a565b6040519080825280602002602001820160405280156111f2578160200160208202803683370190505b50905060005b828110156112985760405163255d109d60e21b8152600481018290526001600160a01b03861690639574427490602401602060405180830381865afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611269919061191f565b82828151811061127b5761127b6118ae565b602090810291909101015280611290816118c4565b9150506111f8565b509392505050565b919050565b60405180610220016040528060006001600160a01b03168152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b038116811461135b57600080fd5b50565b6000806040838503121561137157600080fd5b82359150602083013561138381611346565b809150509250929050565b60005b838110156113a9578181015183820152602001611391565b50506000910152565b600081518084526113ca81602086016020860161138e565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156114265782840389526114148483516113b2565b988501989350908401906001016113fc565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561146c5781516001600160a01b031687529582019590820190600101611447565b509495945050505050565b600081518084526020808501945080840160005b8381101561146c57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161148b565b600081518084526020808501945080840160005b8381101561146c57815187529582019590820190600101611540565b80516001600160a01b0316825260006102206020830151816020860152611585828601826113b2565b9150506040830151848203604086015261159f82826113de565b91505060608301516115bc60608601826001600160a01b03169052565b506080830151608085015260a083015184820360a08601526115de8282611433565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a0808601518783038289015291935091506116468382611477565b925050506101c08084015185830382870152611662838261152c565b925050506101e0808401518583038287015261167e83826113de565b92505050610200808401516116968287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156116f557603f198886030184526116e385835161155c565b945092850192908501906001016116c7565b5092979650505050505050565b6000806040838503121561171557600080fd5b823561172081611346565b9150602083013561138381611346565b602081526000611743602083018461155c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b03811182821017156117835761178361174a565b60405290565b604051601f8201601f191681016001600160401b03811182821017156117b1576117b161174a565b604052919050565b60006001600160401b038211156117d2576117d261174a565b5060051b60200190565b80516112a081611346565b600060208083850312156117fa57600080fd5b82516001600160401b0381111561181057600080fd5b8301601f8101851361182157600080fd5b805161183461182f826117b9565b611789565b81815260059190911b8201830190838101908783111561185357600080fd5b928401925b8284101561187a57835161186b81611346565b82529284019290840190611858565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611885565b634e487b7160e01b600052603260045260246000fd5b6000600182016118d6576118d6611885565b5060010190565b6000816118ec576118ec611885565b506000190190565b805180151581146112a057600080fd5b60006020828403121561191657600080fd5b611743826118f4565b60006020828403121561193157600080fd5b5051919050565b60006020828403121561194a57600080fd5b815161174381611346565b60006020828403121561196757600080fd5b81516001600160401b038082111561197e57600080fd5b818401915084601f83011261199257600080fd5b8151818111156119a4576119a461174a565b6119b7601f8201601f1916602001611789565b91508082528560208285010111156119ce57600080fd5b6119df81602084016020860161138e565b50949350505050565b805163ffffffff811681146112a057600080fd5b60006101608284031215611a0f57600080fd5b611a17611760565b82518152611a27602084016117dc565b6020820152611a38604084016119e8565b6040820152611a49606084016119e8565b6060820152611a5a608084016119e8565b6080820152611a6b60a084016118f4565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b60006020808385031215611ac157600080fd5b82516001600160401b03811115611ad757600080fd5b8301601f81018513611ae857600080fd5b8051611af661182f826117b9565b81815260059190911b82018301908381019087831115611b1557600080fd5b928401925b8284101561187a57835182529284019290840190611b1a56fea2646970667358221220d6945d7fe6d49ee436e7a9f3b3003c5bff8b51e358939bdcaaa4f27c3e18aa1864736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract used as a frontend helper. It doesn't have any state-changing function.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}