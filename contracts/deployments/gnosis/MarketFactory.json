{
  "address": "0x5759c084E284b0C6F34405e5Ae4b421910099735",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parentMarket",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rules",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x82a5bfac6ceb4fe65d05c6e4f801caa20869061b442684138db75ee1c615651c",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x5759c084E284b0C6F34405e5Ae4b421910099735",
    "transactionIndex": 3,
    "gasUsed": "2157149",
    "logsBloom": "0x
    "blockHash": "0x8e03566bea107b7bdc522f5a93279d7e5340f2af7344dab3558c51ee3b00d13f",
    "transactionHash": "0x82a5bfac6ceb4fe65d05c6e4f801caa20869061b442684138db75ee1c615651c",
    "logs": [],
    "blockNumber": 35756308,
    "cumulativeGasUsed": "2584933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x654E8e99AEe71c1fe116CA6413e857D3230fD3E1",
    "0x29F39dE98D750eb77b5FAfb31B2837f079FcE222",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0x5bc8ddE5D07C6bf24911240AA6F9B0190ae3b557",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xee30cb9D605E04B4068fc09b30e182CF03503490",
    302400
  ],
  "numDeployments": 19,
  "solcInputHash": "65df141202f1bca32209c0938ac7838b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"events\":{\"NewMarket(address,string,address,string,bytes32,bytes32,bytes32[])\":{\"details\":\"To be emitted when a new market is created\"}},\"kind\":\"dev\",\"methods\":{\"allMarkets()\":{\"details\":\"Returns all the markets created by this factory\",\"returns\":{\"_0\":\"The addresses of the markets\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_questionTimeout\":\"Reality question timeout.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}},\"createCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Scalar market\"},\"createScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Scalar market. Reverts if a market with the same question already exists.\"},\"marketCount()\":{\"returns\":{\"_0\":\"The amount of markets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Categorical markets are associated with a Reality question that has only one answer\"},\"createMultiCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Categorical markets are associated with a Reality question that has one or more answers\"},\"createMultiScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\"},\"createScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Scalar markets are associated with a Reality question that resolves to a numeric value\"},\"marketCount()\":{\"notice\":\"Returns the amount of markets created by this factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        uint256 max_previous\\n    ) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dd1ae365738a869e5eaca1d0203ee76a763a21b77a96942fc50e1c3ee478bd5\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    struct RealityParams {\\n        bytes32[] questionsIds; // Reality questions ids\\n        uint256 templateId; // Reality templateId\\n        string[] encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    }\\n\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        bytes32 parentCollectionId; // Conditional Tokens parentCollectionId\\n        uint256 parentOutcome; // conditional outcome to use (optional)\\n        address parentMarket; // conditional market to use (optional)\\n        bytes32 questionId; // Conditional Tokens questionId\\n    }\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    ConditionalTokensParams public conditionalTokensParams; // Conditional Tokens parameters\\n    RealityParams public realityParams; // Reality parameters\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionalTokensParams Conditional Tokens params\\n    /// @param _realityParams Reality params\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Multi scalar markets have two or more questions, the other market types have 1\\n    /// @return Array of question ids.\\n    function questionsIds(uint256 index) external view returns (bytes32) {\\n        return realityParams.questionsIds[index];\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question\\n    function encodedQuestions(\\n        uint256 index\\n    ) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return questionsCount The number of Reality questions of this market\\n    function getQuestionsCount() external view returns (uint256) {\\n        return realityParams.questionsIds.length;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x8ab64b490607693fd78543378a63f5fd76426206809206b507c3d06b7e19f12a\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct CreateMarketParams {\\n        string marketName; // Used only in categorical, multi categorical, and scalar markets. In multi scalar markets, the market name is formed using questionStart + outcomeType + questionEnd.\\n        string rules; // IPFS uri of the market rules\\n        string[] outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n        string questionStart; // Used to build the Reality question on multi scalar markets\\n        string questionEnd; // Used to build the Reality question on multi scalar markets\\n        string outcomeType; // Used to build the Reality question on multi scalar markets\\n        uint256 parentOutcome; // conditional outcome to use (optional)\\n        address parentMarket; // conditional market to use (optional)\\n        string category; // Reality question category\\n        string lang; // Reality question language\\n        uint256 lowerBound; // Lower bound, only used for scalar markets\\n        uint256 upperBound; // Upper bound, only user for scalar markets\\n        uint256 minBond; // Min bond to use on Reality\\n        uint32 openingTime; // Reality question opening time\\n        string[] tokenNames; // Name of the ERC20 tokens associated to each outcome\\n    }\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct InternalMarketConfig {\\n        string[] encodedQuestions; // The encoded questions containing the Reality parameters\\n        bytes32 questionId; // Conditional Tokens questionId\\n        bytes32[] questionsIds; // Reality questions ids\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        uint256 outcomeSlotCount; // Conditional Tokens outcomeSlotCount\\n        uint256 templateId; // Reality templateId\\n    }\\n\\n    uint8 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint8 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint8 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    uint32 public questionTimeout; // Reality question timeout\\n\\n    address public immutable arbitrator; // Arbitrator contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n    WrappedERC20Factory public immutable wrappedERC20Factory; // WrappedERC20Factory contract\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    address public immutable collateralToken; // Conditional Tokens collateral token contract\\n    RealityProxy public realityProxy; // Oracle contract\\n    address[] public markets; // Markets created by this factory\\n    address public market; // Market contract\\n\\n    /// @dev To be emitted when a new market is created\\n    event NewMarket(\\n        address indexed market,\\n        string marketName,\\n        address parentMarket,\\n        string rules,\\n        bytes32 conditionId,\\n        bytes32 questionId,\\n        bytes32[] questionsIds\\n    );\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _questionTimeout Reality question timeout.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        WrappedERC20Factory _wrappedERC20Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        uint32 _questionTimeout\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        questionTimeout = _questionTimeout;\\n    }\\n\\n    /// @dev Creates a Categorical market. Reverts if a market with the same question already exists.\\n    /// @notice Categorical markets are associated with a Reality question that has only one answer\\n    function createCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(\\n            params.outcomes.length >= 2,\\n            \\\"Outcomes count must be 2 or more\\\"\\n        );\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Multi Categorical market. Reverts if a market with the same question already exists.\\n    /// @notice Multi Categorical markets are associated with a Reality question that has one or more answers\\n    function createMultiCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(\\n            params.outcomes.length >= 2,\\n            \\\"Outcomes count must be 2 or more\\\"\\n        );\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_MULTI_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_MULTI_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Scalar market. Reverts if a market with the same question already exists.\\n    /// @notice Scalar markets are associated with a Reality question that resolves to a numeric value\\n    function createScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(\\n            params.upperBound > params.lowerBound,\\n            \\\"upperBound must be higher than lowerBound\\\"\\n        );\\n        // values reserved by Reality for INVALID and UNRESOLVED_ANSWER\\n        require(\\n            params.upperBound < type(uint256).max - 2,\\n            \\\"upperBound must be less than uint256.max - 2\\\"\\n        );\\n        require(params.outcomes.length == 2, \\\"Outcomes count must be 2\\\");\\n\\n        uint256 outcomeSlotCount = 3; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithoutOutcomes(\\n            params.marketName,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_UINT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Multi Scalar market\\n    /// @notice Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\\n    function createMultiScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(\\n            params.outcomes.length >= 2,\\n            \\\"Outcomes count must be 2 or more\\\"\\n        );\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\n\\n        string[] memory encodedQuestions = new string[](params.outcomes.length);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            encodedQuestions[i] = encodeRealityQuestionWithoutOutcomes(\\n                string(\\n                    abi.encodePacked(\\n                        params.questionStart,\\n                        params.outcomes[i],\\n                        params.questionEnd\\n                    )\\n                ),\\n                params.category,\\n                params.lang\\n            );\\n\\n            questionsIds[i] = askRealityQuestion(\\n                encodedQuestions[i],\\n                REALITY_UINT_TEMPLATE,\\n                params.openingTime,\\n                params.minBond\\n            );\\n        }\\n        bytes32 questionId = keccak256(abi.encode(questionsIds));\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        address marketId = createMarket(\\n            params,\\n            string(\\n                abi.encodePacked(\\n                    params.questionStart,\\n                    \\\"[\\\",\\n                    params.outcomeType,\\n                    \\\"]\\\",\\n                    params.questionEnd\\n                )\\n            ),\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates the Market and deploys the wrapped ERC20 tokens\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        string memory marketName,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        bytes32 parentCollectionId = params.parentMarket == address(0)\\n            ? bytes32(0)\\n            : conditionalTokens.getCollectionId(\\n                Market(params.parentMarket).parentCollectionId(),\\n                Market(params.parentMarket).conditionId(),\\n                1 << params.parentOutcome\\n            );\\n\\n        deployERC20Positions(\\n            parentCollectionId,\\n            config.conditionId,\\n            config.outcomeSlotCount,\\n            params.tokenNames\\n        );\\n\\n        Market instance = Market(market.clone());\\n\\n        instance.initialize(\\n            marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            Market.ConditionalTokensParams({\\n                conditionId: config.conditionId,\\n                parentCollectionId: parentCollectionId,\\n                parentOutcome: params.parentOutcome,\\n                parentMarket: params.parentMarket,\\n                questionId: config.questionId\\n            }),\\n            Market.RealityParams({\\n                questionsIds: config.questionsIds,\\n                templateId: config.templateId,\\n                encodedQuestions: config.encodedQuestions\\n            }),\\n            realityProxy\\n        );\\n\\n        emit NewMarket(\\n            address(instance),\\n            marketName,\\n            params.parentMarket,\\n            params.rules,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds\\n        );\\n\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    /// @dev Encodes the question, outcomes, category and language following the Reality structure\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\n    /// @param question The question text\\n    /// @param outcomes[] The question outcomes\\n    /// @param category The question category\\n    /// @param lang The question language\\n    /// @return The encoded question\\n    function encodeRealityQuestionWithOutcomes(\\n        string memory question,\\n        string[] calldata outcomes,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        bytes memory encodedOutcomes = abi.encodePacked('\\\"', outcomes[0], '\\\"');\\n\\n        for (uint256 i = 1; i < outcomes.length; i++) {\\n            encodedOutcomes = abi.encodePacked(\\n                encodedOutcomes,\\n                ',\\\"',\\n                outcomes[i],\\n                '\\\"'\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    question,\\n                    separator,\\n                    encodedOutcomes,\\n                    separator,\\n                    category,\\n                    separator,\\n                    lang\\n                )\\n            );\\n    }\\n\\n    /// @dev Encodes the question, category and language following the Reality structure\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\n    /// @param question The question text\\n    /// @param category The question category\\n    /// @param lang The question language\\n    /// @return The encoded question\\n    function encodeRealityQuestionWithoutOutcomes(\\n        string memory question,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(question, separator, category, separator, lang)\\n            );\\n    }\\n\\n    /// @dev Asks a question on reality.\\n    /// Duplicated markets are not allowed, so for Categorical, Multi Categorical, and Scalar markets the same question can be asked only once.\\n    /// If the same question is asked again, it will not revert here but on ConditionalTokens.prepareCondition().\\n    /// We allow here to share a question between a Scalar and a Multi Scalar market or between Multi Scalar markets with different number of questions.\\n    /// @param encodedQuestion The encoded question containing the Reality parameters\\n    /// @param templateId The Reality template id\\n    /// @param openingTime The question opening time\\n    /// @param minBond The question min bond\\n    /// @return The question id\\n    function askRealityQuestion(\\n        string memory encodedQuestion,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(\\n            abi.encodePacked(templateId, openingTime, encodedQuestion)\\n        );\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash,\\n                arbitrator,\\n                questionTimeout,\\n                minBond,\\n                address(realitio),\\n                address(this),\\n                uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            /* This allows to share a question between a scalar and a multi scalar market, or between multi scalar markets.\\n             *\\n             * Example 1:\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\n             * Scalar market with the question: \\\"How many votes will Alice receive?\\\"\\n             *\\n             * Both markets will use the same question for Alice.\\n             *\\n             * Example 2:\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\n             * Multi Scalar market with three questions: \\\"How many votes will Alice receive?\\\", \\\"How many votes will Bob receive?\\\" and \\\"How many votes will David receive?\\\"\\n             *\\n             * Both markets will use the same question for Alice and Bob.\\n             */\\n            return question_id;\\n        }\\n\\n        return\\n            realitio.askQuestionWithMinBond(\\n                templateId,\\n                encodedQuestion,\\n                arbitrator,\\n                questionTimeout,\\n                openingTime,\\n                0,\\n                minBond\\n            );\\n    }\\n\\n    /// @dev Prepares the CTF condition and returns the conditionId\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which must be used for this condition. Must not exceed 256.\\n    function prepareCondition(\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) internal returns (bytes32) {\\n        conditionalTokens.prepareCondition(\\n            address(realityProxy),\\n            questionId,\\n            outcomeSlotCount\\n        );\\n\\n        return\\n            conditionalTokens.getConditionId(\\n                address(realityProxy),\\n                questionId,\\n                outcomeSlotCount\\n            );\\n    }\\n\\n    /// @dev Wraps the ERC1155 outcome tokens to ERC20. The INVALID_RESULT outcome is always called SEER_INVALID_RESULT.\\n    /// @param parentCollectionId The parentCollectionId\\n    /// @param conditionId The conditionId\\n    /// @param outcomeSlotCount The amount of outcomes\\n    /// @param tokenNames The name of each outcome token\\n    function deployERC20Positions(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        string[] memory tokenNames\\n    ) internal {\\n        uint256 invalidResultIndex = outcomeSlotCount - 1;\\n\\n        for (uint j = 0; j < outcomeSlotCount; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\n                parentCollectionId,\\n                conditionId,\\n                1 << j\\n            );\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                collateralToken,\\n                collectionId\\n            );\\n\\n            require(\\n                j == invalidResultIndex || bytes(tokenNames[j]).length != 0,\\n                \\\"Missing token name\\\"\\n            );\\n\\n            wrappedERC20Factory.createWrappedToken(\\n                address(conditionalTokens),\\n                tokenId,\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j],\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j]\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns all the markets created by this factory\\n    /// @return The addresses of the markets\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    /// @notice Returns the amount of markets created by this factory\\n    /// @return The amount of markets\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x656b485c72e61396ed987d35eb979795ee8273c751d5e0b8b933aacedcf01ab3\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param market Market to resolve\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param market Market to resolve\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param market Market to resolve\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param market Market to resolve\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0xd693465b76e19661b45493dc8dfbf14ede0267be0f34079dd5dfe694d9bcc07f\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory; // Address of the Wrapped1155Factory implementation\\n\\n    mapping(uint256 => IERC20) public tokens; // Maps the ERC1155 tokenId to the ERC20 token\\n    mapping(uint256 => bytes) public data; // Token data associated to each tokenId\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @dev Encodes a short string (less than than 31 bytes long) as for storage as expected by Solidity.\\n    /// See https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    /// @param value String to encode\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    /// @dev Wraps an ERC1155 token to ERC20, with a custom name and symbol.\\n    /// @param multiToken ERC1155 token to wrap\\n    /// @param tokenId ERC1155 token ID\\n    /// @param tokenName Wrapped ERC20 name\\n    /// @param tokenSymbol Wrapped ERC20 symbol\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0xb3638b8550c2bcf30654402e6b327bb8aebf962e2431a89ee43c3adc81d1a600\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002750380380620027508339810160408190526200003591620000bf565b600280546001600160a01b0319166001600160a01b03998a1617905595871660805293861660a05291851660c052841660e052831661010052600080546001600160c01b031916640100000000929094169190910263ffffffff19169290921763ffffffff90911617905562000188565b6001600160a01b0381168114620000bc57600080fd5b50565b600080600080600080600080610100898b031215620000dd57600080fd5b8851620000ea81620000a6565b60208a0151909850620000fd81620000a6565b60408a01519097506200011081620000a6565b60608a01519096506200012381620000a6565b60808a01519095506200013681620000a6565b60a08a01519094506200014981620000a6565b60c08a01519093506200015c81620000a6565b60e08a015190925063ffffffff811681146200017757600080fd5b809150509295985092959890939650565b60805160a05160c05160e0516101005161252862000228600039600081816102380152611742015260008181610164015281816110d6015281816111650152818161120d015281816116b801528181611777015261187f01526000818161018b015261185001526000818161025f01528181610ef301528181610f6301526110050152600081816101b201528181610e99015261103601526125286000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c80637389af8a116100875780637389af8a146101d45780637ce04a2c146101e757806380f55605146101fa57806391515d551461020d578063b1283e7714610220578063b2016bd414610233578063bc8802a21461025a578063ec9790821461028157600080fd5b80631ba18b9b146100da5780632ff8d50414610104578063375a7cba1461013757806344a64dbe1461014c5780635bd9e2991461015f57806361371325146101865780636cc6cde1146101ad575b600080fd5b6000546100ea9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b60005461011f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100fb565b61013f610292565b6040516100fb9190611a37565b61011f61015a366004611a84565b6102f4565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f6101e2366004611a84565b610674565b61011f6101f5366004611a84565b61099c565b60025461011f906001600160a01b031681565b61011f61021b366004611a84565b610c1e565b61011f61022e366004611ac6565b610dd3565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b6001546040519081526020016100fb565b606060018054806020026020016040519081016040528092919081815260200182805480156102ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cc575b5050505050905090565b6000816101400135826101600135116103665760405162461bcd60e51b815260206004820152602960248201527f7570706572426f756e64206d75737420626520686967686572207468616e206c6044820152681bddd95c909bdd5b9960ba1b60648201526084015b60405180910390fd5b6103736002600019611af5565b826101600135106103db5760405162461bcd60e51b815260206004820152602c60248201527f7570706572426f756e64206d757374206265206c657373207468616e2075696e60448201526b3a191a9b1736b0bc1016901960a11b606482015260840161035d565b6103e86040830183611b08565b90506002146104345760405162461bcd60e51b815260206004820152601860248201527727baba31b7b6b2b99031b7bab73a1036bab9ba103132901960411b604482015260640161035d565b60408051600180825281830190925260039160009190816020015b606081526020019060019003908161044f5790505090506105336104738580611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104b692505050610100870187611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104f992505050610120880188611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dfd92505050565b8160008151811061054657610546611bb4565b602002602001018190525060006105938260008151811061056957610569611bb4565b602090810291909101015160016105886101c089016101a08a01611bea565b886101800135610e5d565b905060006105a182856110bb565b604080516001808252818301909252919250600091906020808301908036833701905050905082816000815181106105db576105db611bb4565b602090810291909101015260006106686105f489611d81565b6105fe8a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600160a082015291506111f39050565b98975050505050505050565b600060026106856040840184611b08565b905010156106a55760405162461bcd60e51b815260040161035d90611f4c565b60006106b46040840184611b08565b6106c091506001611f81565b905060006106d16040850185611b08565b90506001600160401b038111156106ea576106ea611b58565b604051908082528060200260200182016040528015610713578160200160208202803683370190505b50905060006107256040860186611b08565b90506001600160401b0381111561073e5761073e611b58565b60405190808252806020026020018201604052801561077157816020015b606081526020019060019003908161075c5790505b50905060005b6107846040870187611b08565b90508110156108da5761084f61079d6060880188611b6e565b6107aa60408a018a611b08565b858181106107ba576107ba611bb4565b90506020028101906107cc9190611b6e565b6107d960808c018c611b6e565b6040516020016107ee96959493929190611f94565b60408051601f1981840301815291905261080c610100890189611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104f9925050506101208a018a611b6e565b82828151811061086157610861611bb4565b60200260200101819052506108ab82828151811061088157610881611bb4565b602090810291909101015160016108a06101c08a016101a08b01611bea565b896101800135610e5d565b8382815181106108bd576108bd611bb4565b6020908102919091010152806108d281611fc4565b915050610777565b506000826040516020016108ee9190612018565b604051602081830303815290604052805190602001209050600061091282866110bb565b9050600061066861092289611d81565b61092f60608b018b611b6e565b61093c60a08d018d611b6e565b61094960808f018f611b6e565b60405160200161095e9695949392919061202b565b60408051601f1981840301815260c0830182528883526020830188905290820189905260608201869052608082018a9052600160a0830152906111f3565b600060026109ad6040840184611b08565b905010156109cd5760405162461bcd60e51b815260040161035d90611f4c565b60006109dc6040840184611b08565b6109e891506001611f81565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610a03579050509050610af4610a278580611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a69925050506040870187611b08565b610a77610100890189611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610aba925050506101208a018a611b6e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155d92505050565b81600081518110610b0757610b07611bb4565b60200260200101819052506000610b4982600081518110610b2a57610b2a611bb4565b602090810291909101015160036105886101c089016101a08a01611bea565b90506000610b5782856110bb565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610b9157610b91611bb4565b60209081029190910101526000610668610baa89611d81565b610bb48a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600360a082015291506111f39050565b60006002610c2f6040840184611b08565b90501015610c4f5760405162461bcd60e51b815260040161035d90611f4c565b6000610c5e6040840184611b08565b610c6a91506001611f81565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610c85579050509050610ca9610a278580611b6e565b81600081518110610cbc57610cbc611bb4565b60200260200101819052506000610cfe82600081518110610cdf57610cdf611bb4565b602090810291909101015160026105886101c089016101a08a01611bea565b90506000610d0c82856110bb565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610d4657610d46611bb4565b60209081029190910101526000610668610d5f89611d81565b610d698a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600260a082015291506111f39050565b60018181548110610de357600080fd5b6000918252602090912001546001600160a01b0316905081565b60606000604051602001610e1a9062e2909f60e81b815260030190565b60405160208183030381529060405290508481858386604051602001610e44959493929190612091565b6040516020818303038152906040529150509392505050565b600080848487604051602001610e75939291906120fc565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd69190612135565b63ffffffff1615610fea5791506110b39050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c49261106b928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d9060040161217e565b6020604051808303816000875af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae91906121ce565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee7549261111b9264010000000090920490911690879087906004016121e7565b600060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae293506111a99264010000000090041690879087906004016121e7565b602060405180830381865afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea91906121ce565b90505b92915050565b60e083015160009081906001600160a01b031615611381577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f78660e001516001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a091906121ce565b8760e001516001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130691906121ce565b60c08901516040516001600160e01b031960e086901b168152600481019390935260248301919091526001901b6044820152606401602060405180830381865afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c91906121ce565b611384565b60005b905061139f8184606001518560800151886101c00151611675565b6002546000906113b7906001600160a01b03166119c5565b9050806001600160a01b0316633eaac0b88688604001518961014001518a61016001516040518060a001604052808b6060015181526020018981526020018d60c0015181526020018d60e001516001600160a01b031681526020018b6020015181525060405180606001604052808c6040015181526020018c60a0015181526020018c60000151815250600060049054906101000a90046001600160a01b03166040518863ffffffff1660e01b8152600401611479979695949392919061229e565b600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b50505050806001600160a01b03167fba4c7f097cee6f417efffd4d2c0a5fd9cafccc8320f0caea63c76018ac05ef5e868860e001518960200151886060015189602001518a6040015160405161150296959493929190612338565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905595945050505050565b6060600060405160200161157a9062e2909f60e81b815260030190565b60405160208183030381529060405290506000868660008181106115a0576115a0611bb4565b90506020028101906115b29190611b6e565b6040516020016115c3929190612399565b60408051601f19818403018152919052905060015b8681101561163b57818888838181106115f3576115f3611bb4565b90506020028101906116059190611b6e565b604051602001611617939291906123c0565b6040516020818303038152906040529150808061163390611fc4565b9150506115d8565b508782828488868960405160200161165997969594939291906123ff565b6040516020818303038152906040529250505095945050505050565b6000611682600184611af5565b905060005b838110156119bd5760405163856296f760e01b815260048101879052602481018690526001821b60448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b91906121ce565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa1580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e291906121ce565b90508383148061180d57508483815181106117ff576117ff611bb4565b602002602001015151600014155b61184e5760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b604482015260640161035d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f0000000000000000000000000000000000000000000000000000000000000000838787146118c5578887815181106118b8576118b8611bb4565b60200260200101516118f2565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b8888146119185789888151811061190b5761190b611bb4565b6020026020010151611945565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b81526004016119649493929190612491565b6020604051808303816000875af1158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a791906124d5565b50505080806119b590611fc4565b915050611687565b505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611a32576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6020808252825182820181905260009190848201906040850190845b81811015611a785783516001600160a01b031683529284019291840191600101611a53565b50909695505050505050565b600060208284031215611a9657600080fd5b81356001600160401b03811115611aac57600080fd5b82016101e08185031215611abf57600080fd5b9392505050565b600060208284031215611ad857600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156111ed576111ed611adf565b6000808335601e19843603018112611b1f57600080fd5b8301803591506001600160401b03821115611b3957600080fd5b6020019150600581901b3603821315611b5157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000808335601e19843603018112611b8557600080fd5b8301803591506001600160401b03821115611b9f57600080fd5b602001915036819003821315611b5157600080fd5b634e487b7160e01b600052603260045260246000fd5b63ffffffff81168114611bdc57600080fd5b50565b8035611a3281611bca565b600060208284031215611bfc57600080fd5b8135611abf81611bca565b6040516101e081016001600160401b0381118282101715611c2a57611c2a611b58565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611c5857611c58611b58565b604052919050565b600082601f830112611c7157600080fd5b81356001600160401b03811115611c8a57611c8a611b58565b611c9d601f8201601f1916602001611c30565b818152846020838601011115611cb257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611ce057600080fd5b813560206001600160401b0380831115611cfc57611cfc611b58565b8260051b611d0b838201611c30565b9384528581018301938381019088861115611d2557600080fd5b84880192505b8583101561066857823584811115611d435760008081fd5b611d518a87838c0101611c60565b8352509184019190840190611d2b565b6001600160a01b0381168114611bdc57600080fd5b8035611a3281611d61565b60006101e08236031215611d9457600080fd5b611d9c611c07565b82356001600160401b0380821115611db357600080fd5b611dbf36838701611c60565b83526020850135915080821115611dd557600080fd5b611de136838701611c60565b60208401526040850135915080821115611dfa57600080fd5b611e0636838701611ccf565b60408401526060850135915080821115611e1f57600080fd5b611e2b36838701611c60565b60608401526080850135915080821115611e4457600080fd5b611e5036838701611c60565b608084015260a0850135915080821115611e6957600080fd5b611e7536838701611c60565b60a084015260c085013560c0840152611e9060e08601611d76565b60e084015261010091508185013581811115611eab57600080fd5b611eb736828801611c60565b838501525061012091508185013581811115611ed257600080fd5b611ede36828801611c60565b928401929092526101408581013590840152610160808601359084015261018080860135908401526101a09150611f16828601611bdf565b828401526101c091508185013581811115611f3057600080fd5b611f3c36828801611ccf565b8385015250505080915050919050565b6020808252818101527f4f7574636f6d657320636f756e74206d7573742062652032206f72206d6f7265604082015260600190565b808201808211156111ed576111ed611adf565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b600060018201611fd657611fd6611adf565b5060010190565b600081518084526020808501945080840160005b8381101561200d57815187529582019590820190600101611ff1565b509495945050505050565b6020815260006111ea6020830184611fdd565b858782376000868201605b60f81b815285876001830137605d60f81b600191870191820152838560028301376000930160020192835250909695505050505050565b60005b83811015612088578181015183820152602001612070565b50506000910152565b600086516120a3818460208b0161206d565b8651908301906120b7818360208b0161206d565b86519101906120ca818360208a0161206d565b85519101906120dd81836020890161206d565b84519101906120f081836020880161206d565b01979650505050505050565b83815263ffffffff60e01b8360e01b1660208201526000825161212681602485016020870161206d565b91909101602401949350505050565b60006020828403121561214757600080fd5b8151611abf81611bca565b6000815180845261216a81602086016020860161206d565b601f01601f19169290920160200192915050565b87815260e06020820152600061219760e0830189612152565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156121e057600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600081518084526020808501808196508360051b8101915082860160005b8581101561225057828403895261223e848351612152565b98850198935090840190600101612226565b5091979650505050505050565b60008151606084526122726060850182611fdd565b905060208301516020850152604083015184820360408601526122958282612208565b95945050505050565b60006101608083526122b28184018b612152565b905082810360208401526122c6818a612208565b905087604084015286606084015285516080840152602086015160a0840152604086015160c084015260018060a01b0360608701511660e0840152608086015161010084015282810361012084015261231f818661225d565b9150506106686101408301846001600160a01b03169052565b60c08152600061234b60c0830189612152565b6001600160a01b0388166020840152828103604084015261236c8188612152565b905085606084015284608084015282810360a084015261238c8185611fdd565b9998505050505050505050565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b600084516123d281846020890161206d565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b6000885160206124128285838e0161206d565b8951918401916124258184848e0161206d565b89519201916124378184848d0161206d565b88519201916124498184848c0161206d565b875192019161245b8184848b0161206d565b865192019161246d8184848a0161206d565b855192019161247f818484890161206d565b919091019a9950505050505050505050565b60018060a01b03851681528360208201526080604082015260006124b86080830185612152565b82810360608401526124ca8185612152565b979650505050505050565b6000602082840312156124e757600080fd5b8151611abf81611d6156fea2646970667358221220075d8548af4e8d37cff59ca0ff767ade25ce8bca6b2ff948c745c3823c22df6064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c80637389af8a116100875780637389af8a146101d45780637ce04a2c146101e757806380f55605146101fa57806391515d551461020d578063b1283e7714610220578063b2016bd414610233578063bc8802a21461025a578063ec9790821461028157600080fd5b80631ba18b9b146100da5780632ff8d50414610104578063375a7cba1461013757806344a64dbe1461014c5780635bd9e2991461015f57806361371325146101865780636cc6cde1146101ad575b600080fd5b6000546100ea9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b60005461011f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100fb565b61013f610292565b6040516100fb9190611a37565b61011f61015a366004611a84565b6102f4565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f6101e2366004611a84565b610674565b61011f6101f5366004611a84565b61099c565b60025461011f906001600160a01b031681565b61011f61021b366004611a84565b610c1e565b61011f61022e366004611ac6565b610dd3565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b6001546040519081526020016100fb565b606060018054806020026020016040519081016040528092919081815260200182805480156102ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cc575b5050505050905090565b6000816101400135826101600135116103665760405162461bcd60e51b815260206004820152602960248201527f7570706572426f756e64206d75737420626520686967686572207468616e206c6044820152681bddd95c909bdd5b9960ba1b60648201526084015b60405180910390fd5b6103736002600019611af5565b826101600135106103db5760405162461bcd60e51b815260206004820152602c60248201527f7570706572426f756e64206d757374206265206c657373207468616e2075696e60448201526b3a191a9b1736b0bc1016901960a11b606482015260840161035d565b6103e86040830183611b08565b90506002146104345760405162461bcd60e51b815260206004820152601860248201527727baba31b7b6b2b99031b7bab73a1036bab9ba103132901960411b604482015260640161035d565b60408051600180825281830190925260039160009190816020015b606081526020019060019003908161044f5790505090506105336104738580611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104b692505050610100870187611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104f992505050610120880188611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dfd92505050565b8160008151811061054657610546611bb4565b602002602001018190525060006105938260008151811061056957610569611bb4565b602090810291909101015160016105886101c089016101a08a01611bea565b886101800135610e5d565b905060006105a182856110bb565b604080516001808252818301909252919250600091906020808301908036833701905050905082816000815181106105db576105db611bb4565b602090810291909101015260006106686105f489611d81565b6105fe8a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600160a082015291506111f39050565b98975050505050505050565b600060026106856040840184611b08565b905010156106a55760405162461bcd60e51b815260040161035d90611f4c565b60006106b46040840184611b08565b6106c091506001611f81565b905060006106d16040850185611b08565b90506001600160401b038111156106ea576106ea611b58565b604051908082528060200260200182016040528015610713578160200160208202803683370190505b50905060006107256040860186611b08565b90506001600160401b0381111561073e5761073e611b58565b60405190808252806020026020018201604052801561077157816020015b606081526020019060019003908161075c5790505b50905060005b6107846040870187611b08565b90508110156108da5761084f61079d6060880188611b6e565b6107aa60408a018a611b08565b858181106107ba576107ba611bb4565b90506020028101906107cc9190611b6e565b6107d960808c018c611b6e565b6040516020016107ee96959493929190611f94565b60408051601f1981840301815291905261080c610100890189611b6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104f9925050506101208a018a611b6e565b82828151811061086157610861611bb4565b60200260200101819052506108ab82828151811061088157610881611bb4565b602090810291909101015160016108a06101c08a016101a08b01611bea565b896101800135610e5d565b8382815181106108bd576108bd611bb4565b6020908102919091010152806108d281611fc4565b915050610777565b506000826040516020016108ee9190612018565b604051602081830303815290604052805190602001209050600061091282866110bb565b9050600061066861092289611d81565b61092f60608b018b611b6e565b61093c60a08d018d611b6e565b61094960808f018f611b6e565b60405160200161095e9695949392919061202b565b60408051601f1981840301815260c0830182528883526020830188905290820189905260608201869052608082018a9052600160a0830152906111f3565b600060026109ad6040840184611b08565b905010156109cd5760405162461bcd60e51b815260040161035d90611f4c565b60006109dc6040840184611b08565b6109e891506001611f81565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610a03579050509050610af4610a278580611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a69925050506040870187611b08565b610a77610100890189611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610aba925050506101208a018a611b6e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155d92505050565b81600081518110610b0757610b07611bb4565b60200260200101819052506000610b4982600081518110610b2a57610b2a611bb4565b602090810291909101015160036105886101c089016101a08a01611bea565b90506000610b5782856110bb565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610b9157610b91611bb4565b60209081029190910101526000610668610baa89611d81565b610bb48a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600360a082015291506111f39050565b60006002610c2f6040840184611b08565b90501015610c4f5760405162461bcd60e51b815260040161035d90611f4c565b6000610c5e6040840184611b08565b610c6a91506001611f81565b60408051600180825281830190925291925060009190816020015b6060815260200190600190039081610c85579050509050610ca9610a278580611b6e565b81600081518110610cbc57610cbc611bb4565b60200260200101819052506000610cfe82600081518110610cdf57610cdf611bb4565b602090810291909101015160026105886101c089016101a08a01611bea565b90506000610d0c82856110bb565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610d4657610d46611bb4565b60209081029190910101526000610668610d5f89611d81565b610d698a80611b6e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160c0810182528b8152602081018b905290810188905260608101899052608081018c9052600260a082015291506111f39050565b60018181548110610de357600080fd5b6000918252602090912001546001600160a01b0316905081565b60606000604051602001610e1a9062e2909f60e81b815260030190565b60405160208183030381529060405290508481858386604051602001610e44959493929190612091565b6040516020818303038152906040529150509392505050565b600080848487604051602001610e75939291906120fc565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd69190612135565b63ffffffff1615610fea5791506110b39050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c49261106b928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d9060040161217e565b6020604051808303816000875af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae91906121ce565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee7549261111b9264010000000090920490911690879087906004016121e7565b600060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae293506111a99264010000000090041690879087906004016121e7565b602060405180830381865afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea91906121ce565b90505b92915050565b60e083015160009081906001600160a01b031615611381577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f78660e001516001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a091906121ce565b8760e001516001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130691906121ce565b60c08901516040516001600160e01b031960e086901b168152600481019390935260248301919091526001901b6044820152606401602060405180830381865afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c91906121ce565b611384565b60005b905061139f8184606001518560800151886101c00151611675565b6002546000906113b7906001600160a01b03166119c5565b9050806001600160a01b0316633eaac0b88688604001518961014001518a61016001516040518060a001604052808b6060015181526020018981526020018d60c0015181526020018d60e001516001600160a01b031681526020018b6020015181525060405180606001604052808c6040015181526020018c60a0015181526020018c60000151815250600060049054906101000a90046001600160a01b03166040518863ffffffff1660e01b8152600401611479979695949392919061229e565b600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b50505050806001600160a01b03167fba4c7f097cee6f417efffd4d2c0a5fd9cafccc8320f0caea63c76018ac05ef5e868860e001518960200151886060015189602001518a6040015160405161150296959493929190612338565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905595945050505050565b6060600060405160200161157a9062e2909f60e81b815260030190565b60405160208183030381529060405290506000868660008181106115a0576115a0611bb4565b90506020028101906115b29190611b6e565b6040516020016115c3929190612399565b60408051601f19818403018152919052905060015b8681101561163b57818888838181106115f3576115f3611bb4565b90506020028101906116059190611b6e565b604051602001611617939291906123c0565b6040516020818303038152906040529150808061163390611fc4565b9150506115d8565b508782828488868960405160200161165997969594939291906123ff565b6040516020818303038152906040529250505095945050505050565b6000611682600184611af5565b905060005b838110156119bd5760405163856296f760e01b815260048101879052602481018690526001821b60448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b91906121ce565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa1580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e291906121ce565b90508383148061180d57508483815181106117ff576117ff611bb4565b602002602001015151600014155b61184e5760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b604482015260640161035d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f0000000000000000000000000000000000000000000000000000000000000000838787146118c5578887815181106118b8576118b8611bb4565b60200260200101516118f2565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b8888146119185789888151811061190b5761190b611bb4565b6020026020010151611945565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b81526004016119649493929190612491565b6020604051808303816000875af1158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a791906124d5565b50505080806119b590611fc4565b915050611687565b505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611a32576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6020808252825182820181905260009190848201906040850190845b81811015611a785783516001600160a01b031683529284019291840191600101611a53565b50909695505050505050565b600060208284031215611a9657600080fd5b81356001600160401b03811115611aac57600080fd5b82016101e08185031215611abf57600080fd5b9392505050565b600060208284031215611ad857600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156111ed576111ed611adf565b6000808335601e19843603018112611b1f57600080fd5b8301803591506001600160401b03821115611b3957600080fd5b6020019150600581901b3603821315611b5157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6000808335601e19843603018112611b8557600080fd5b8301803591506001600160401b03821115611b9f57600080fd5b602001915036819003821315611b5157600080fd5b634e487b7160e01b600052603260045260246000fd5b63ffffffff81168114611bdc57600080fd5b50565b8035611a3281611bca565b600060208284031215611bfc57600080fd5b8135611abf81611bca565b6040516101e081016001600160401b0381118282101715611c2a57611c2a611b58565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611c5857611c58611b58565b604052919050565b600082601f830112611c7157600080fd5b81356001600160401b03811115611c8a57611c8a611b58565b611c9d601f8201601f1916602001611c30565b818152846020838601011115611cb257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611ce057600080fd5b813560206001600160401b0380831115611cfc57611cfc611b58565b8260051b611d0b838201611c30565b9384528581018301938381019088861115611d2557600080fd5b84880192505b8583101561066857823584811115611d435760008081fd5b611d518a87838c0101611c60565b8352509184019190840190611d2b565b6001600160a01b0381168114611bdc57600080fd5b8035611a3281611d61565b60006101e08236031215611d9457600080fd5b611d9c611c07565b82356001600160401b0380821115611db357600080fd5b611dbf36838701611c60565b83526020850135915080821115611dd557600080fd5b611de136838701611c60565b60208401526040850135915080821115611dfa57600080fd5b611e0636838701611ccf565b60408401526060850135915080821115611e1f57600080fd5b611e2b36838701611c60565b60608401526080850135915080821115611e4457600080fd5b611e5036838701611c60565b608084015260a0850135915080821115611e6957600080fd5b611e7536838701611c60565b60a084015260c085013560c0840152611e9060e08601611d76565b60e084015261010091508185013581811115611eab57600080fd5b611eb736828801611c60565b838501525061012091508185013581811115611ed257600080fd5b611ede36828801611c60565b928401929092526101408581013590840152610160808601359084015261018080860135908401526101a09150611f16828601611bdf565b828401526101c091508185013581811115611f3057600080fd5b611f3c36828801611ccf565b8385015250505080915050919050565b6020808252818101527f4f7574636f6d657320636f756e74206d7573742062652032206f72206d6f7265604082015260600190565b808201808211156111ed576111ed611adf565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b600060018201611fd657611fd6611adf565b5060010190565b600081518084526020808501945080840160005b8381101561200d57815187529582019590820190600101611ff1565b509495945050505050565b6020815260006111ea6020830184611fdd565b858782376000868201605b60f81b815285876001830137605d60f81b600191870191820152838560028301376000930160020192835250909695505050505050565b60005b83811015612088578181015183820152602001612070565b50506000910152565b600086516120a3818460208b0161206d565b8651908301906120b7818360208b0161206d565b86519101906120ca818360208a0161206d565b85519101906120dd81836020890161206d565b84519101906120f081836020880161206d565b01979650505050505050565b83815263ffffffff60e01b8360e01b1660208201526000825161212681602485016020870161206d565b91909101602401949350505050565b60006020828403121561214757600080fd5b8151611abf81611bca565b6000815180845261216a81602086016020860161206d565b601f01601f19169290920160200192915050565b87815260e06020820152600061219760e0830189612152565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156121e057600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600081518084526020808501808196508360051b8101915082860160005b8581101561225057828403895261223e848351612152565b98850198935090840190600101612226565b5091979650505050505050565b60008151606084526122726060850182611fdd565b905060208301516020850152604083015184820360408601526122958282612208565b95945050505050565b60006101608083526122b28184018b612152565b905082810360208401526122c6818a612208565b905087604084015286606084015285516080840152602086015160a0840152604086015160c084015260018060a01b0360608701511660e0840152608086015161010084015282810361012084015261231f818661225d565b9150506106686101408301846001600160a01b03169052565b60c08152600061234b60c0830189612152565b6001600160a01b0388166020840152828103604084015261236c8188612152565b905085606084015284608084015282810360a084015261238c8185611fdd565b9998505050505050505050565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b600084516123d281846020890161206d565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b6000885160206124128285838e0161206d565b8951918401916124258184848e0161206d565b89519201916124378184848d0161206d565b88519201916124498184848c0161206d565b875192019161245b8184848b0161206d565b865192019161246d8184848a0161206d565b855192019161247f818484890161206d565b919091019a9950505050505050505050565b60018060a01b03851681528360208201526080604082015260006124b86080830185612152565b82810360608401526124ca8185612152565b979650505050505050565b6000602082840312156124e757600080fd5b8151611abf81611d6156fea2646970667358221220075d8548af4e8d37cff59ca0ff767ade25ce8bca6b2ff948c745c3823c22df6064736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "events": {
      "NewMarket(address,string,address,string,bytes32,bytes32,bytes32[])": {
        "details": "To be emitted when a new market is created"
      }
    },
    "kind": "dev",
    "methods": {
      "allMarkets()": {
        "details": "Returns all the markets created by this factory",
        "returns": {
          "_0": "The addresses of the markets"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_questionTimeout": "Reality question timeout.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      },
      "createCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Scalar market"
      },
      "createScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Scalar market. Reverts if a market with the same question already exists."
      },
      "marketCount()": {
        "returns": {
          "_0": "The amount of markets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Categorical markets are associated with a Reality question that has only one answer"
      },
      "createMultiCategoricalMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Categorical markets are associated with a Reality question that has one or more answers"
      },
      "createMultiScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value"
      },
      "createScalarMarket((string,string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Scalar markets are associated with a Reality question that resolves to a numeric value"
      },
      "marketCount()": {
        "notice": "Returns the amount of markets created by this factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1176,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "questionTimeout",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1192,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "realityProxy",
        "offset": 4,
        "slot": "0",
        "type": "t_contract(RealityProxy)3385"
      },
      {
        "astId": 1195,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1197,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3385": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}