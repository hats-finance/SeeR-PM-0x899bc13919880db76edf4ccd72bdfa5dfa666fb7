{
  "address": "0xe61F8ca04D3c92313a22257706Cef7d8ed13A788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "encodedQuestions",
          "type": "string[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x954122473e5909434490d844e70445d1c070ebb8c8f1b106b890e1c495c288c4",
  "receipt": {
    "to": null,
    "from": "0xB972788fD94972D673eB3aF068df1Dfe11A2ec37",
    "contractAddress": "0xe61F8ca04D3c92313a22257706Cef7d8ed13A788",
    "transactionIndex": 5,
    "gasUsed": "2021215",
    "logsBloom": "0x
    "blockHash": "0xef6b3265fb28b037c7cf471c19390191586817dee8f6b560d378d15f5929f19f",
    "transactionHash": "0x954122473e5909434490d844e70445d1c070ebb8c8f1b106b890e1c495c288c4",
    "logs": [],
    "blockNumber": 35554760,
    "cumulativeGasUsed": "2211220",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaB903CdAf1068E86018F098c369B0A645c3F98Ac",
    "0x29F39dE98D750eb77b5FAfb31B2837f079FcE222",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0x5bc8ddE5D07C6bf24911240AA6F9B0190ae3b557",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xee30cb9D605E04B4068fc09b30e182CF03503490",
    302400
  ],
  "numDeployments": 16,
  "solcInputHash": "8902272fc44d579fb58a14088cc0330d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"events\":{\"NewMarket(address,string,string[],uint256,uint256,bytes32,bytes32,bytes32[],uint256,string[])\":{\"details\":\"To be emitted when a new market is created\"}},\"kind\":\"dev\",\"methods\":{\"allMarkets()\":{\"details\":\"Returns all the markets created by this factory\",\"returns\":{\"_0\":\"The addresses of the markets\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_questionTimeout\":\"Reality question timeout.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}},\"createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Scalar market\"},\"createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Scalar market. Reverts if a market with the same question already exists.\"},\"marketCount()\":{\"returns\":{\"_0\":\"The amount of markets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Categorical markets are associated with a Reality question that has only one answer\"},\"createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Categorical markets are associated with a Reality question that has one or more answers\"},\"createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\"},\"createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Scalar markets are associated with a Reality question that resolves to a numeric value\"},\"marketCount()\":{\"notice\":\"Returns the amount of markets created by this factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function balanceOf(address owner) external returns (uint256);\\r\\n}\\r\\n\\r\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\r\\ninterface IRealityETH_v3_0 {\\r\\n    function askQuestionWithMinBond(\\r\\n        uint256 template_id,\\r\\n        string memory question,\\r\\n        address arbitrator,\\r\\n        uint32 timeout,\\r\\n        uint32 opening_ts,\\r\\n        uint256 nonce,\\r\\n        uint256 min_bond\\r\\n    ) external payable returns (bytes32);\\r\\n\\r\\n    function resultForOnceSettled(\\r\\n        bytes32 question_id\\r\\n    ) external view returns (bytes32);\\r\\n\\r\\n    function getContentHash(\\r\\n        bytes32 question_id\\r\\n    ) external view returns (bytes32);\\r\\n\\r\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\r\\n\\r\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\r\\n}\\r\\n\\r\\ninterface IConditionalTokens {\\r\\n    function payoutNumerators(\\r\\n        bytes32 conditionId,\\r\\n        uint index\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function payoutDenominator(\\r\\n        bytes32 conditionId\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function prepareCondition(\\r\\n        address oracle,\\r\\n        bytes32 questionId,\\r\\n        uint outcomeSlotCount\\r\\n    ) external;\\r\\n\\r\\n    function reportPayouts(\\r\\n        bytes32 questionId,\\r\\n        uint[] calldata payouts\\r\\n    ) external;\\r\\n\\r\\n    function splitPosition(\\r\\n        /*IERC20*/ address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint[] calldata partition,\\r\\n        uint amount\\r\\n    ) external;\\r\\n\\r\\n    function mergePositions(\\r\\n        /*IERC20*/ address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint[] calldata partition,\\r\\n        uint amount\\r\\n    ) external;\\r\\n\\r\\n    function redeemPositions(\\r\\n        /*IERC20*/ address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint[] calldata indexSets\\r\\n    ) external;\\r\\n\\r\\n    function getConditionId(\\r\\n        address oracle,\\r\\n        bytes32 questionId,\\r\\n        uint outcomeSlotCount\\r\\n    ) external pure returns (bytes32);\\r\\n\\r\\n    function getCollectionId(\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint indexSet\\r\\n    ) external view returns (bytes32);\\r\\n\\r\\n    function getPositionId(\\r\\n        address collateralToken,\\r\\n        bytes32 collectionId\\r\\n    ) external pure returns (uint);\\r\\n\\r\\n    function getOutcomeSlotCount(\\r\\n        bytes32 conditionId\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface Wrapped1155Factory {\\r\\n    function requireWrapped1155(\\r\\n        /*IERC1155*/ address multiToken,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (/*Wrapped1155*/ IERC20);\\r\\n\\r\\n    function unwrap(\\r\\n        /*IERC1155*/ address multiToken,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        address recipient,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x729d520dbebdc8c9324a2ce5a9a46a67dc5ae38ccf13ca4096491c4fab95c36f\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\r\\n *  @authors: [@xyzseer]\\r\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1]\\r\\n *  @auditors: []\\r\\n *  @bounties: []\\r\\n *  @deployments: []\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./RealityProxy.sol\\\";\\r\\n\\r\\ncontract Market {\\r\\n    bool public initialized; // Flag to initialize the market only once\\r\\n\\r\\n    string public marketName; // The name of the market\\r\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\r\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\r\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\r\\n    bytes32 public conditionId; // Conditional Tokens conditionId\\r\\n    bytes32 public questionId; // Conditional Tokens questionId\\r\\n    bytes32[] public questionsIds; // Reality questions ids\\r\\n    uint256 public templateId; // Reality templateId\\r\\n    string[] public encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\r\\n    RealityProxy public realityProxy; // Oracle contract\\r\\n\\r\\n    /// @dev Initializer\\r\\n    /// @param _marketName The name of the market\\r\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\r\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\r\\n    /// @param _upperBound Upper bound, only user for scalar markets\\r\\n    /// @param _conditionId Conditional Tokens conditionId\\r\\n    /// @param _questionId Conditional Tokens questionId\\r\\n    /// @param _questionsIds Reality questions ids\\r\\n    /// @param _templateId Reality templateId\\r\\n    /// @param _encodedQuestions Encoded questions parameters, needed to create and reopen a question\\r\\n    /// @param _realityProxy Oracle contract\\r\\n    function initialize(\\r\\n        string memory _marketName,\\r\\n        string[] memory _outcomes,\\r\\n        uint256 _lowerBound,\\r\\n        uint256 _upperBound,\\r\\n        bytes32 _conditionId,\\r\\n        bytes32 _questionId,\\r\\n        bytes32[] memory _questionsIds,\\r\\n        uint256 _templateId,\\r\\n        string[] memory _encodedQuestions,\\r\\n        RealityProxy _realityProxy\\r\\n    ) external {\\r\\n        require(!initialized, \\\"Already initialized.\\\");\\r\\n\\r\\n        marketName = _marketName;\\r\\n        outcomes = _outcomes;\\r\\n        lowerBound = _lowerBound;\\r\\n        upperBound = _upperBound;\\r\\n        conditionId = _conditionId;\\r\\n        questionId = _questionId;\\r\\n        questionsIds = _questionsIds;\\r\\n        templateId = _templateId;\\r\\n        encodedQuestions = _encodedQuestions;\\r\\n        realityProxy = _realityProxy;\\r\\n\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\r\\n    /// @return questionsCount The number of Reality questions of this market\\r\\n    function getQuestionsCount() external view returns (uint256) {\\r\\n        return questionsIds.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the number of outcomes.\\r\\n    /// Doesn't include the INVALID_RESULT outcome.\\r\\n    /// @return numOutcomes The number of outcomes\\r\\n    function numOutcomes() external view returns (uint256) {\\r\\n        return outcomes.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function to resolve the market\\r\\n    function resolve() external {\\r\\n        realityProxy.resolve(this);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd6c5231bdbc38da9f956aff0cd756c5143cebc4b847686243b399cfc6eda7c63\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"/**\\r\\n *  @authors: [@xyzseer]\\r\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1]\\r\\n *  @auditors: []\\r\\n *  @bounties: []\\r\\n *  @deployments: []\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./Market.sol\\\";\\r\\nimport \\\"./RealityProxy.sol\\\";\\r\\nimport \\\"./WrappedERC20Factory.sol\\\";\\r\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\r\\n\\r\\ncontract MarketFactory {\\r\\n    using Clones for address;\\r\\n\\r\\n    // Workaround \\\"stack too deep\\\" errors\\r\\n    struct CreateMarketParams {\\r\\n        string marketName; // Used only in categorical, multi categorical, and scalar markets. In multi scalar markets, the market name is formed using questionStart + outcomeType + questionEnd.\\r\\n        string[] outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\r\\n        string questionStart; // Used to build the Reality question on multi scalar markets\\r\\n        string questionEnd; // Used to build the Reality question on multi scalar markets\\r\\n        string outcomeType; // Used to build the Reality question on multi scalar markets\\r\\n        string category; // Reality question category\\r\\n        string lang; // Reality question language\\r\\n        uint256 lowerBound; // Lower bound, only used for scalar markets\\r\\n        uint256 upperBound; // Upper bound, only user for scalar markets\\r\\n        uint256 minBond; // Min bond to use on Reality\\r\\n        uint32 openingTime; // Reality question opening time\\r\\n        string[] tokenNames; // Name of the ERC20 tokens associated to each outcome\\r\\n    }\\r\\n\\r\\n    // Workaround \\\"stack too deep\\\" errors\\r\\n    struct InternalMarketConfig {\\r\\n        bytes32 questionId; // Conditional Tokens questionId\\r\\n        bytes32[] questionsIds; // Reality questions ids\\r\\n        bytes32 conditionId; // Conditional Tokens conditionId\\r\\n        uint256 outcomeSlotCount; // Conditional Tokens outcomeSlotCount\\r\\n        uint256 templateId; // Reality templateId\\r\\n    }\\r\\n\\r\\n    uint8 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\r\\n    uint8 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\r\\n    uint8 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\r\\n\\r\\n    uint32 public questionTimeout; // Reality question timeout\\r\\n\\r\\n    address public immutable arbitrator; // Arbitrator contract\\r\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\r\\n    WrappedERC20Factory public immutable wrappedERC20Factory; // WrappedERC20Factory contract\\r\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\r\\n    address public immutable collateralToken; // Conditional Tokens collateral token contract\\r\\n    RealityProxy public realityProxy; // Oracle contract\\r\\n    address[] public markets; // Markets created by this factory\\r\\n    address public market; // Market contract\\r\\n\\r\\n    /// @dev To be emitted when a new market is created\\r\\n    event NewMarket(\\r\\n        address indexed market,\\r\\n        string marketName,\\r\\n        string[] outcomes,\\r\\n        uint256 lowerBound,\\r\\n        uint256 upperBound,\\r\\n        bytes32 conditionId,\\r\\n        bytes32 questionId,\\r\\n        bytes32[] questionsIds,\\r\\n        uint256 templateId,\\r\\n        string[] encodedQuestions\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev Constructor.\\r\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\r\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\r\\n     *  @param _realitio Address of the Realitio implementation.\\r\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\r\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\r\\n     *  @param _collateralToken Address of the collateral token.\\r\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\r\\n     *  @param _questionTimeout Reality question timeout.\\r\\n     */\\r\\n    constructor(\\r\\n        address _market,\\r\\n        address _arbitrator,\\r\\n        IRealityETH_v3_0 _realitio,\\r\\n        WrappedERC20Factory _wrappedERC20Factory,\\r\\n        IConditionalTokens _conditionalTokens,\\r\\n        address _collateralToken,\\r\\n        RealityProxy _realityProxy,\\r\\n        uint32 _questionTimeout\\r\\n    ) {\\r\\n        market = _market;\\r\\n        arbitrator = _arbitrator;\\r\\n        realitio = _realitio;\\r\\n        wrappedERC20Factory = _wrappedERC20Factory;\\r\\n        conditionalTokens = _conditionalTokens;\\r\\n        collateralToken = _collateralToken;\\r\\n        realityProxy = _realityProxy;\\r\\n        questionTimeout = _questionTimeout;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates a Categorical market. Reverts if a market with the same question already exists.\\r\\n    /// @notice Categorical markets are associated with a Reality question that has only one answer\\r\\n    function createCategoricalMarket(\\r\\n        CreateMarketParams calldata params\\r\\n    ) external returns (address) {\\r\\n        require(\\r\\n            params.outcomes.length >= 2,\\r\\n            \\\"Outcomes count must be 2 or more\\\"\\r\\n        );\\r\\n\\r\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\r\\n\\r\\n        string[] memory encodedQuestions = new string[](1);\\r\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\r\\n            params.marketName,\\r\\n            params.outcomes,\\r\\n            params.category,\\r\\n            params.lang\\r\\n        );\\r\\n\\r\\n        bytes32 questionId = askRealityQuestion(\\r\\n            encodedQuestions[0],\\r\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\r\\n            params.openingTime,\\r\\n            params.minBond\\r\\n        );\\r\\n\\r\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\r\\n\\r\\n        bytes32[] memory questionsIds = new bytes32[](1);\\r\\n        questionsIds[0] = questionId;\\r\\n\\r\\n        address marketId = createMarket(\\r\\n            params,\\r\\n            params.marketName,\\r\\n            encodedQuestions,\\r\\n            InternalMarketConfig({\\r\\n                questionId: questionId,\\r\\n                questionsIds: questionsIds,\\r\\n                conditionId: conditionId,\\r\\n                outcomeSlotCount: outcomeSlotCount,\\r\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return marketId;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates a Multi Categorical market. Reverts if a market with the same question already exists.\\r\\n    /// @notice Multi Categorical markets are associated with a Reality question that has one or more answers\\r\\n    function createMultiCategoricalMarket(\\r\\n        CreateMarketParams calldata params\\r\\n    ) external returns (address) {\\r\\n        require(\\r\\n            params.outcomes.length >= 2,\\r\\n            \\\"Outcomes count must be 2 or more\\\"\\r\\n        );\\r\\n\\r\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\r\\n\\r\\n        string[] memory encodedQuestions = new string[](1);\\r\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\r\\n            params.marketName,\\r\\n            params.outcomes,\\r\\n            params.category,\\r\\n            params.lang\\r\\n        );\\r\\n\\r\\n        bytes32 questionId = askRealityQuestion(\\r\\n            encodedQuestions[0],\\r\\n            REALITY_MULTI_SELECT_TEMPLATE,\\r\\n            params.openingTime,\\r\\n            params.minBond\\r\\n        );\\r\\n\\r\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\r\\n\\r\\n        bytes32[] memory questionsIds = new bytes32[](1);\\r\\n        questionsIds[0] = questionId;\\r\\n\\r\\n        address marketId = createMarket(\\r\\n            params,\\r\\n            params.marketName,\\r\\n            encodedQuestions,\\r\\n            InternalMarketConfig({\\r\\n                questionId: questionId,\\r\\n                questionsIds: questionsIds,\\r\\n                conditionId: conditionId,\\r\\n                outcomeSlotCount: outcomeSlotCount,\\r\\n                templateId: REALITY_MULTI_SELECT_TEMPLATE\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return marketId;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates a Scalar market. Reverts if a market with the same question already exists.\\r\\n    /// @notice Scalar markets are associated with a Reality question that resolves to a numeric value\\r\\n    function createScalarMarket(\\r\\n        CreateMarketParams calldata params\\r\\n    ) external returns (address) {\\r\\n        require(\\r\\n            params.upperBound > params.lowerBound,\\r\\n            \\\"upperBound must be higher than lowerBound\\\"\\r\\n        );\\r\\n        // values reserved by Reality for INVALID and UNRESOLVED_ANSWER\\r\\n        require(\\r\\n            params.upperBound < type(uint256).max - 2,\\r\\n            \\\"upperBound must be less than uint256.max - 2\\\"\\r\\n        );\\r\\n        require(params.outcomes.length == 2, \\\"Outcomes count must be 2\\\");\\r\\n\\r\\n        uint256 outcomeSlotCount = 3; // additional outcome for Invalid Result\\r\\n\\r\\n        string[] memory encodedQuestions = new string[](1);\\r\\n        encodedQuestions[0] = encodeRealityQuestionWithoutOutcomes(\\r\\n            params.marketName,\\r\\n            params.category,\\r\\n            params.lang\\r\\n        );\\r\\n\\r\\n        bytes32 questionId = askRealityQuestion(\\r\\n            encodedQuestions[0],\\r\\n            REALITY_UINT_TEMPLATE,\\r\\n            params.openingTime,\\r\\n            params.minBond\\r\\n        );\\r\\n\\r\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\r\\n\\r\\n        bytes32[] memory questionsIds = new bytes32[](1);\\r\\n        questionsIds[0] = questionId;\\r\\n\\r\\n        address marketId = createMarket(\\r\\n            params,\\r\\n            params.marketName,\\r\\n            encodedQuestions,\\r\\n            InternalMarketConfig({\\r\\n                questionId: questionId,\\r\\n                questionsIds: questionsIds,\\r\\n                conditionId: conditionId,\\r\\n                outcomeSlotCount: outcomeSlotCount,\\r\\n                templateId: REALITY_UINT_TEMPLATE\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return marketId;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates a Multi Scalar market\\r\\n    /// @notice Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\\r\\n    function createMultiScalarMarket(\\r\\n        CreateMarketParams calldata params\\r\\n    ) external returns (address) {\\r\\n        require(\\r\\n            params.outcomes.length >= 2,\\r\\n            \\\"Outcomes count must be 2 or more\\\"\\r\\n        );\\r\\n\\r\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\r\\n\\r\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\r\\n\\r\\n        string[] memory encodedQuestions = new string[](params.outcomes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\r\\n            encodedQuestions[i] = encodeRealityQuestionWithoutOutcomes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        params.questionStart,\\r\\n                        params.outcomes[i],\\r\\n                        params.questionEnd\\r\\n                    )\\r\\n                ),\\r\\n                params.category,\\r\\n                params.lang\\r\\n            );\\r\\n\\r\\n            questionsIds[i] = askRealityQuestion(\\r\\n                encodedQuestions[i],\\r\\n                REALITY_UINT_TEMPLATE,\\r\\n                params.openingTime,\\r\\n                params.minBond\\r\\n            );\\r\\n        }\\r\\n        bytes32 questionId = keccak256(abi.encode(questionsIds));\\r\\n\\r\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\r\\n\\r\\n        address marketId = createMarket(\\r\\n            params,\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    params.questionStart,\\r\\n                    '[',\\r\\n                    params.outcomeType,\\r\\n                    ']',\\r\\n                    params.questionEnd\\r\\n                )\\r\\n            ),\\r\\n            encodedQuestions,\\r\\n            InternalMarketConfig({\\r\\n                questionId: questionId,\\r\\n                questionsIds: questionsIds,\\r\\n                conditionId: conditionId,\\r\\n                outcomeSlotCount: outcomeSlotCount,\\r\\n                templateId: REALITY_UINT_TEMPLATE\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return marketId;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates the Market and deploys the wrapped ERC20 tokens\\r\\n    function createMarket(\\r\\n        CreateMarketParams memory params,\\r\\n        string memory marketName,\\r\\n        string[] memory encodedQuestions,\\r\\n        InternalMarketConfig memory config\\r\\n    ) internal returns (address) {\\r\\n        Market instance = Market(market.clone());\\r\\n\\r\\n        deployERC20Positions(\\r\\n            config.conditionId,\\r\\n            config.outcomeSlotCount,\\r\\n            params.tokenNames\\r\\n        );\\r\\n        instance.initialize(\\r\\n            marketName,\\r\\n            params.outcomes,\\r\\n            params.lowerBound,\\r\\n            params.upperBound,\\r\\n            config.conditionId,\\r\\n            config.questionId,\\r\\n            config.questionsIds,\\r\\n            config.templateId,\\r\\n            encodedQuestions,\\r\\n            realityProxy\\r\\n        );\\r\\n\\r\\n        emit NewMarket(\\r\\n            address(instance),\\r\\n            marketName,\\r\\n            params.outcomes,\\r\\n            params.lowerBound,\\r\\n            params.upperBound,\\r\\n            config.conditionId,\\r\\n            config.questionId,\\r\\n            config.questionsIds,\\r\\n            config.templateId,\\r\\n            encodedQuestions\\r\\n        );\\r\\n        markets.push(address(instance));\\r\\n\\r\\n        return address(instance);\\r\\n    }\\r\\n\\r\\n    /// @dev Encodes the question, outcomes, category and language following the Reality structure\\r\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\r\\n    /// @param question The question text\\r\\n    /// @param outcomes[] The question outcomes\\r\\n    /// @param category The question category\\r\\n    /// @param lang The question language\\r\\n    /// @return The encoded question\\r\\n    function encodeRealityQuestionWithOutcomes(\\r\\n        string memory question,\\r\\n        string[] calldata outcomes,\\r\\n        string memory category,\\r\\n        string memory lang\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\r\\n\\r\\n        bytes memory encodedOutcomes = abi.encodePacked('\\\"', outcomes[0], '\\\"');\\r\\n\\r\\n        for (uint256 i = 1; i < outcomes.length; i++) {\\r\\n            encodedOutcomes = abi.encodePacked(\\r\\n                encodedOutcomes,\\r\\n                ',\\\"',\\r\\n                outcomes[i],\\r\\n                '\\\"'\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    question,\\r\\n                    separator,\\r\\n                    encodedOutcomes,\\r\\n                    separator,\\r\\n                    category,\\r\\n                    separator,\\r\\n                    lang\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Encodes the question, category and language following the Reality structure\\r\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\r\\n    /// @param question The question text\\r\\n    /// @param category The question category\\r\\n    /// @param lang The question language\\r\\n    /// @return The encoded question\\r\\n    function encodeRealityQuestionWithoutOutcomes(\\r\\n        string memory question,\\r\\n        string memory category,\\r\\n        string memory lang\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(question, separator, category, separator, lang)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Asks a question on reality.\\r\\n    /// Duplicated markets are not allowed, so for Categorical, Multi Categorical, and Scalar markets the same question can be asked only once.\\r\\n    /// If the same question is asked again, it will not revert here but on ConditionalTokens.prepareCondition().\\r\\n    /// We allow here to share a question between a Scalar and a Multi Scalar market or between Multi Scalar markets with different number of questions.\\r\\n    /// @param encodedQuestion The encoded question containing the Reality parameters\\r\\n    /// @param templateId The Reality template id\\r\\n    /// @param openingTime The question opening time\\r\\n    /// @param minBond The question min bond\\r\\n    /// @return The question id\\r\\n    function askRealityQuestion(\\r\\n        string memory encodedQuestion,\\r\\n        uint256 templateId,\\r\\n        uint32 openingTime,\\r\\n        uint256 minBond\\r\\n    ) internal returns (bytes32) {\\r\\n        bytes32 content_hash = keccak256(\\r\\n            abi.encodePacked(templateId, openingTime, encodedQuestion)\\r\\n        );\\r\\n\\r\\n        bytes32 question_id = keccak256(\\r\\n            abi.encodePacked(\\r\\n                content_hash,\\r\\n                arbitrator,\\r\\n                questionTimeout,\\r\\n                minBond,\\r\\n                address(realitio),\\r\\n                address(this),\\r\\n                uint256(0)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        if (realitio.getTimeout(question_id) != 0) {\\r\\n            /* This allows to share a question between a scalar and a multi scalar market, or between multi scalar markets.\\r\\n             *\\r\\n             * Example 1:\\r\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\r\\n             * Scalar market with the question: \\\"How many votes will Alice receive?\\\"\\r\\n             *\\r\\n             * Both markets will use the same question for Alice.\\r\\n             *\\r\\n             * Example 2:\\r\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\r\\n             * Multi Scalar market with three questions: \\\"How many votes will Alice receive?\\\", \\\"How many votes will Bob receive?\\\" and \\\"How many votes will David receive?\\\"\\r\\n             *\\r\\n             * Both markets will use the same question for Alice and Bob.\\r\\n             */\\r\\n            return question_id;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            realitio.askQuestionWithMinBond(\\r\\n                templateId,\\r\\n                encodedQuestion,\\r\\n                arbitrator,\\r\\n                questionTimeout,\\r\\n                openingTime,\\r\\n                0,\\r\\n                minBond\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Prepares the CTF condition and returns the conditionId\\r\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\r\\n    /// @param outcomeSlotCount The number of outcome slots which must be used for this condition. Must not exceed 256.\\r\\n    function prepareCondition(\\r\\n        bytes32 questionId,\\r\\n        uint outcomeSlotCount\\r\\n    ) internal returns (bytes32) {\\r\\n        conditionalTokens.prepareCondition(\\r\\n            address(realityProxy),\\r\\n            questionId,\\r\\n            outcomeSlotCount\\r\\n        );\\r\\n\\r\\n        return\\r\\n            conditionalTokens.getConditionId(\\r\\n                address(realityProxy),\\r\\n                questionId,\\r\\n                outcomeSlotCount\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Wraps the ERC1155 outcome tokens to ERC20. The INVALID_RESULT outcome is always called SEER_INVALID_RESULT.\\r\\n    /// @param conditionId The conditionId\\r\\n    /// @param outcomeSlotCount The amount of outcomes\\r\\n    /// @param tokenNames The name of each outcome token\\r\\n    function deployERC20Positions(\\r\\n        bytes32 conditionId,\\r\\n        uint256 outcomeSlotCount,\\r\\n        string[] memory tokenNames\\r\\n    ) internal {\\r\\n        uint256 invalidResultIndex = outcomeSlotCount - 1;\\r\\n\\r\\n        for (uint j = 0; j < outcomeSlotCount; j++) {\\r\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\r\\n                bytes32(0),\\r\\n                conditionId,\\r\\n                1 << j\\r\\n            );\\r\\n            uint256 tokenId = conditionalTokens.getPositionId(\\r\\n                collateralToken,\\r\\n                collectionId\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                j == invalidResultIndex || bytes(tokenNames[j]).length != 0,\\r\\n                \\\"Missing token name\\\"\\r\\n            );\\r\\n\\r\\n            wrappedERC20Factory.createWrappedToken(\\r\\n                address(conditionalTokens),\\r\\n                tokenId,\\r\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j],\\r\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns all the markets created by this factory\\r\\n    /// @return The addresses of the markets\\r\\n    function allMarkets() external view returns (address[] memory) {\\r\\n        return markets;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the amount of markets created by this factory\\r\\n    /// @return The amount of markets\\r\\n    function marketCount() external view returns (uint256) {\\r\\n        return markets.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x78044076188004f37a9fd0bfdf58cd29be90bc09ed0bbd3a3d1992a1b06602b9\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\r\\n *  @authors: [@xyzseer]\\r\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1]\\r\\n *  @auditors: []\\r\\n *  @bounties: []\\r\\n *  @deployments: []\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\r\\nimport \\\"./Market.sol\\\";\\r\\n\\r\\ncontract RealityProxy {\\r\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\r\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\r\\n\\r\\n    bytes32 constant INVALID_RESULT =\\r\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\r\\n\\r\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\r\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\r\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\r\\n\\r\\n    /// @dev Constructor\\r\\n    /// @param _conditionalTokens Conditional Tokens contract address\\r\\n    /// @param _realitio Reality.eth contract address\\r\\n    constructor(\\r\\n        IConditionalTokens _conditionalTokens,\\r\\n        IRealityETH_v3_0 _realitio\\r\\n    ) {\\r\\n        conditionalTokens = _conditionalTokens;\\r\\n        realitio = _realitio;\\r\\n    }\\r\\n\\r\\n    /// @dev Resolves the specified market\\r\\n    /// @param market Market to resolve\\r\\n    function resolve(Market market) external {\\r\\n        uint256 templateId = market.templateId();\\r\\n\\r\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\r\\n            resolveCategoricalMarket(market);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\r\\n            resolveMultiCategoricalMarket(market);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (market.getQuestionsCount() > 1) {\\r\\n            resolveMultiScalarMarket(market);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        resolveScalarMarket(market);\\r\\n    }\\r\\n\\r\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\r\\n    /// @param market Market to resolve\\r\\n    function resolveCategoricalMarket(Market market) internal {\\r\\n        bytes32 questionId = market.questionId();\\r\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\r\\n        uint256 numOutcomes = market.numOutcomes();\\r\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\r\\n\\r\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\r\\n            // the last outcome is INVALID_RESULT\\r\\n            payouts[numOutcomes] = 1;\\r\\n        } else {\\r\\n            payouts[answer] = 1;\\r\\n        }\\r\\n\\r\\n        conditionalTokens.reportPayouts(questionId, payouts);\\r\\n    }\\r\\n\\r\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\r\\n    /// @param market Market to resolve\\r\\n    function resolveMultiCategoricalMarket(Market market) internal {\\r\\n        bytes32 questionId = market.questionId();\\r\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\r\\n        uint256 numOutcomes = market.numOutcomes();\\r\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\r\\n\\r\\n        if (answer == uint256(INVALID_RESULT)) {\\r\\n            // the last outcome is INVALID_RESULT\\r\\n            payouts[numOutcomes] = 1;\\r\\n        } else {\\r\\n            bool allZeroes = true;\\r\\n\\r\\n            for (uint i = 0; i < numOutcomes; i++) {\\r\\n                payouts[i] = (answer >> i) & 1;\\r\\n                allZeroes = allZeroes && payouts[i] == 0;\\r\\n            }\\r\\n\\r\\n            if (allZeroes) {\\r\\n                // invalid result\\r\\n                payouts[numOutcomes] = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        conditionalTokens.reportPayouts(questionId, payouts);\\r\\n    }\\r\\n\\r\\n    /// @dev Resolves to invalid if the answer is invalid\\r\\n    /// @param market Market to resolve\\r\\n    function resolveScalarMarket(Market market) internal {\\r\\n        bytes32 questionId = market.questionId();\\r\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\r\\n        uint256[] memory payouts = new uint256[](3);\\r\\n\\r\\n        uint256 low = market.lowerBound();\\r\\n        uint256 high = market.upperBound();\\r\\n\\r\\n        if (answer == uint256(INVALID_RESULT)) {\\r\\n            // the last outcome is INVALID_RESULT\\r\\n            payouts[2] = 1;\\r\\n        } else if (answer <= low) {\\r\\n            payouts[0] = 1;\\r\\n        } else if (answer >= high) {\\r\\n            payouts[1] = 1;\\r\\n        } else {\\r\\n            payouts[0] = high - answer;\\r\\n            payouts[1] = answer - low;\\r\\n        }\\r\\n\\r\\n        conditionalTokens.reportPayouts(questionId, payouts);\\r\\n    }\\r\\n\\r\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\r\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\r\\n    /// @param market Market to resolve\\r\\n    function resolveMultiScalarMarket(Market market) internal {\\r\\n        uint256 numOutcomes = market.numOutcomes();\\r\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\r\\n\\r\\n        bool allZeroesOrInvalid = true;\\r\\n\\r\\n        /*\\r\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\r\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\r\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\r\\n         */\\r\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\r\\n\\r\\n        for (uint i = 0; i < numOutcomes; i++) {\\r\\n            payouts[i] = uint256(\\r\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\r\\n            );\\r\\n\\r\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\r\\n                payouts[i] = 0;\\r\\n            } else if (payouts[i] > maxPayout) {\\r\\n                payouts[i] = maxPayout;\\r\\n            }\\r\\n\\r\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\r\\n        }\\r\\n\\r\\n        if (allZeroesOrInvalid) {\\r\\n            // invalid result\\r\\n            payouts[numOutcomes] = 1;\\r\\n        }\\r\\n\\r\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0280736878e4a6f08dc6bc72b8e4915aed1c73b16752b0f88dcdb03f1a5db508\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"/**\\r\\n *  @authors: [@xyzseer]\\r\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1]\\r\\n *  @auditors: []\\r\\n *  @bounties: []\\r\\n *  @deployments: []\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\r\\n\\r\\ncontract WrappedERC20Factory {\\r\\n    Wrapped1155Factory public immutable wrapped1155Factory; // Address of the Wrapped1155Factory implementation\\r\\n\\r\\n    mapping(uint256 => IERC20) public tokens; // Maps the ERC1155 tokenId to the ERC20 token\\r\\n    mapping(uint256 => bytes) public data; // Token data associated to each tokenId\\r\\n\\r\\n    /**\\r\\n     *  @dev Constructor.\\r\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\r\\n     */\\r\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\r\\n        wrapped1155Factory = _wrapped1155Factory;\\r\\n    }\\r\\n\\r\\n    /// @dev Encodes a short string (less than than 31 bytes long) as for storage as expected by Solidity.\\r\\n    /// See https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\r\\n    /// @param value String to encode\\r\\n    function toString31(\\r\\n        string memory value\\r\\n    ) public pure returns (bytes32 encodedString) {\\r\\n        uint256 length = bytes(value).length;\\r\\n        require(length < 32, \\\"string too long\\\");\\r\\n\\r\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\r\\n        // word because its length is less than 32.\\r\\n        assembly {\\r\\n            encodedString := mload(add(value, 0x20))\\r\\n        }\\r\\n\\r\\n        // Now mask the string data, this ensures that the bytes past the string length\\r\\n        // are all 0s.\\r\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\r\\n        encodedString = encodedString & mask;\\r\\n\\r\\n        // Finally, set the least significant byte to be the hex length of the encoded\\r\\n        // string, that is its byte-length times two.\\r\\n        encodedString = encodedString | bytes32(length << 1);\\r\\n    }\\r\\n\\r\\n    /// @dev Wraps an ERC1155 token to ERC20, with a custom name and symbol.\\r\\n    /// @param multiToken ERC1155 token to wrap\\r\\n    /// @param tokenId ERC1155 token ID\\r\\n    /// @param tokenName Wrapped ERC20 name\\r\\n    /// @param tokenSymbol Wrapped ERC20 symbol\\r\\n    function createWrappedToken(\\r\\n        address multiToken,\\r\\n        uint256 tokenId,\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol\\r\\n    ) external returns (IERC20) {\\r\\n        bytes memory tokenData = abi.encodePacked(\\r\\n            toString31(tokenName),\\r\\n            toString31(tokenSymbol),\\r\\n            uint8(18)\\r\\n        );\\r\\n\\r\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\r\\n            multiToken,\\r\\n            tokenId,\\r\\n            tokenData\\r\\n        );\\r\\n\\r\\n        tokens[tokenId] = erc20;\\r\\n        data[tokenId] = tokenData;\\r\\n\\r\\n        return erc20;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1b339fb644512b12dbc37792d195e13f4a36189c95952b8c1789c8f8a46b22d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620024d3380380620024d38339810160408190526200003591620000bf565b600280546001600160a01b0319166001600160a01b03998a1617905595871660805293861660a05291851660c052841660e052831661010052600080546001600160c01b031916640100000000929094169190910263ffffffff19169290921763ffffffff90911617905562000188565b6001600160a01b0381168114620000bc57600080fd5b50565b600080600080600080600080610100898b031215620000dd57600080fd5b8851620000ea81620000a6565b60208a0151909850620000fd81620000a6565b60408a01519097506200011081620000a6565b60608a01519096506200012381620000a6565b60808a01519095506200013681620000a6565b60a08a01519094506200014981620000a6565b60c08a01519093506200015c81620000a6565b60e08a015190925063ffffffff811681146200017757600080fd5b809150509295985092959890939650565b60805160a05160c05160e051610100516122b262000221600039600081816101ec01526115c701526000818161015101528181611174015281816112030152818161153d015281816115fc015261170401526000818161017801526116d501526000818161022601528181610f910152818161100101526110a301526000818161019f01528181610f3701526110d401526122b26000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c8063b1283e7711610087578063b1283e77146101d4578063b2016bd4146101e7578063b3a297521461020e578063bc8802a214610221578063e0f6683614610248578063ec9790821461025b578063ff5744ac1461026c578063ff8ff7a31461027f57600080fd5b80631ba18b9b146100da5780632ff8d50414610104578063375a7cba146101375780635bd9e2991461014c57806361371325146101735780636cc6cde11461019a57806380f55605146101c1575b600080fd5b6000546100ea9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b60005461011f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100fb565b61013f610292565b6040516100fb9190611849565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b60025461011f906001600160a01b031681565b61011f6101e2366004611896565b6102f4565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f61021c3660046118af565b61031e565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f6102563660046118af565b6105b8565b6001546040519081526020016100fb565b61011f61027a3660046118af565b610913565b61011f61028d3660046118af565b610ac2565b606060018054806020026020016040519081016040528092919081815260200182805480156102ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cc575b5050505050905090565b6001818154811061030457600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600261032f60208401846118f1565b905010156103585760405162461bcd60e51b815260040161034f90611941565b60405180910390fd5b600061036760208401846118f1565b6103739150600161198c565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161038e57905050905061047d6103b285806119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103f49250505060208701876118f1565b61040160a08901896119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104439250505060c08a018a6119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610de392505050565b81600081518110610490576104906119fb565b602002602001018190525060006104dd826000815181106104b3576104b36119fb565b602090810291909101015160026104d261016089016101408a01611a31565b886101200135610efb565b905060006104eb8285611159565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610525576105256119fb565b602090810291909101015260006105ac61053e89611ba8565b6105488a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600260808201528a92509050611291565b98975050505050505050565b60008160e00135826101000135116106245760405162461bcd60e51b815260206004820152602960248201527f7570706572426f756e64206d75737420626520686967686572207468616e206c6044820152681bddd95c909bdd5b9960ba1b606482015260840161034f565b6106316002600019611d2c565b826101000135106106995760405162461bcd60e51b815260206004820152602c60248201527f7570706572426f756e64206d757374206265206c657373207468616e2075696e60448201526b3a191a9b1736b0bc1016901960a11b606482015260840161034f565b6106a660208301836118f1565b90506002146106f25760405162461bcd60e51b815260206004820152601860248201527727baba31b7b6b2b99031b7bab73a1036bab9ba103132901960411b604482015260640161034f565b60408051600180825281830190925260039160009190816020015b606081526020019060019003908161070d5790505090506107ef61073185806119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107739250505060a08701876119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b59250505060c08801886119b5565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061142892505050565b81600081518110610802576108026119fb565b6020026020010181905250600061084482600081518110610825576108256119fb565b602090810291909101015160016104d261016089016101408a01611a31565b905060006108528285611159565b6040805160018082528183019092529192506000919060208083019080368337019050509050828160008151811061088c5761088c6119fb565b602090810291909101015260006105ac6108a589611ba8565b6108af8a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600160808201528a92509050611291565b6000600261092460208401846118f1565b905010156109445760405162461bcd60e51b815260040161034f90611941565b600061095360208401846118f1565b61095f9150600161198c565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161097a57905050905061099e6103b285806119b5565b816000815181106109b1576109b16119fb565b602002602001018190525060006109f3826000815181106109d4576109d46119fb565b602090810291909101015160036104d261016089016101408a01611a31565b90506000610a018285611159565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610a3b57610a3b6119fb565b602090810291909101015260006105ac610a5489611ba8565b610a5e8a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600360808201528a92509050611291565b60006002610ad360208401846118f1565b90501015610af35760405162461bcd60e51b815260040161034f90611941565b6000610b0260208401846118f1565b610b0e9150600161198c565b90506000610b1f60208501856118f1565b90506001600160401b03811115610b3857610b3861199f565b604051908082528060200260200182016040528015610b61578160200160208202803683370190505b5090506000610b7360208601866118f1565b90506001600160401b03811115610b8c57610b8c61199f565b604051908082528060200260200182016040528015610bbf57816020015b6060815260200190600190039081610baa5790505b50905060005b610bd260208701876118f1565b9050811015610d2657610c9b610beb60408801886119b5565b610bf860208a018a6118f1565b85818110610c0857610c086119fb565b9050602002810190610c1a91906119b5565b610c2760608c018c6119b5565b604051602001610c3c96959493929190611d3f565b60408051601f19818403018152919052610c5960a08901896119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b59250505060c08a018a6119b5565b828281518110610cad57610cad6119fb565b6020026020010181905250610cf7828281518110610ccd57610ccd6119fb565b60209081029190910101516001610cec6101608a016101408b01611a31565b896101200135610efb565b838281518110610d0957610d096119fb565b602090810291909101015280610d1e81611d6f565b915050610bc5565b50600082604051602001610d3a9190611dc3565b6040516020818303038152906040528051906020012090506000610d5e8286611159565b905060006105ac610d6e89611ba8565b610d7b60408b018b6119b5565b610d8860808d018d6119b5565b610d9560608f018f6119b5565b604051602001610daa96959493929190611dd6565b60408051601f1981840301815260a083018252878352602083018a9052908201869052606082018a905260016080830152908790611291565b60606000604051602001610e009062e2909f60e81b815260030190565b6040516020818303038152906040529050600086866000818110610e2657610e266119fb565b9050602002810190610e3891906119b5565b604051602001610e49929190611e18565b60408051601f19818403018152919052905060015b86811015610ec15781888883818110610e7957610e796119fb565b9050602002810190610e8b91906119b5565b604051602001610e9d93929190611e63565b60405160208183030381529060405291508080610eb990611d6f565b915050610e5e565b5087828284888689604051602001610edf9796959493929190611ea2565b6040516020818303038152906040529250505095945050505050565b600080848487604051602001610f1393929190611f34565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110749190611f6d565b63ffffffff16156110885791506111519050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c492611109928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d90600401611fb6565b6020604051808303816000875af1158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190612006565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee754926111b992640100000000909204909116908790879060040161201f565b600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae2935061124792640100000000900416908790879060040161201f565b602060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190612006565b90505b92915050565b60025460009081906112ab906001600160a01b0316611488565b90506112c5836040015184606001518861016001516114fa565b806001600160a01b03166312e24aa48688602001518960e001518a6101000151886040015189600001518a602001518b608001518d600060049054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016113359a99989796959493929190612095565b600060405180830381600087803b15801561134f57600080fd5b505af1158015611363573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928688602001518960e001518a6101000151886040015189600001518a602001518b608001518d6040516113cd99989796959493929190612125565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905595945050505050565b606060006040516020016114459062e2909f60e81b815260030190565b6040516020818303038152906040529050848185838660405160200161146f9594939291906121a4565b6040516020818303038152906040529150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166114f5576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000611507600184611d2c565b905060005b838110156118425760405163856296f760e01b8152600060048201819052602482018790526001831b6044830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190612006565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116679190612006565b9050838314806116925750848381518110611684576116846119fb565b602002602001015151600014155b6116d35760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b604482015260640161034f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f00000000000000000000000000000000000000000000000000000000000000008387871461174a5788878151811061173d5761173d6119fb565b6020026020010151611777565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b88881461179d57898881518110611790576117906119fb565b60200260200101516117ca565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b81526004016117e9949392919061220f565b6020604051808303816000875af1158015611808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182c9190612253565b505050808061183a90611d6f565b91505061150c565b5050505050565b6020808252825182820181905260009190848201906040850190845b8181101561188a5783516001600160a01b031683529284019291840191600101611865565b50909695505050505050565b6000602082840312156118a857600080fd5b5035919050565b6000602082840312156118c157600080fd5b81356001600160401b038111156118d757600080fd5b820161018081850312156118ea57600080fd5b9392505050565b6000808335601e1984360301811261190857600080fd5b8301803591506001600160401b0382111561192257600080fd5b6020019150600581901b360382131561193a57600080fd5b9250929050565b6020808252818101527f4f7574636f6d657320636f756e74206d7573742062652032206f72206d6f7265604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561128b5761128b611976565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126119cc57600080fd5b8301803591506001600160401b038211156119e657600080fd5b60200191503681900382131561193a57600080fd5b634e487b7160e01b600052603260045260246000fd5b63ffffffff81168114611a2357600080fd5b50565b80356114f581611a11565b600060208284031215611a4357600080fd5b81356118ea81611a11565b60405161018081016001600160401b0381118282101715611a7157611a7161199f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611a9f57611a9f61199f565b604052919050565b600082601f830112611ab857600080fd5b81356001600160401b03811115611ad157611ad161199f565b611ae4601f8201601f1916602001611a77565b818152846020838601011115611af957600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611b2757600080fd5b813560206001600160401b0380831115611b4357611b4361199f565b8260051b611b52838201611a77565b9384528581018301938381019088861115611b6c57600080fd5b84880192505b858310156105ac57823584811115611b8a5760008081fd5b611b988a87838c0101611aa7565b8352509184019190840190611b72565b60006101808236031215611bbb57600080fd5b611bc3611a4e565b82356001600160401b0380821115611bda57600080fd5b611be636838701611aa7565b83526020850135915080821115611bfc57600080fd5b611c0836838701611b16565b60208401526040850135915080821115611c2157600080fd5b611c2d36838701611aa7565b60408401526060850135915080821115611c4657600080fd5b611c5236838701611aa7565b60608401526080850135915080821115611c6b57600080fd5b611c7736838701611aa7565b608084015260a0850135915080821115611c9057600080fd5b611c9c36838701611aa7565b60a084015260c0850135915080821115611cb557600080fd5b611cc136838701611aa7565b60c084015260e08581013590840152610100808601359084015261012080860135908401526101409150611cf6828601611a26565b8284015261016091508185013581811115611d1057600080fd5b611d1c36828801611b16565b8385015250505080915050919050565b8181038181111561128b5761128b611976565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b600060018201611d8157611d81611976565b5060010190565b600081518084526020808501945080840160005b83811015611db857815187529582019590820190600101611d9c565b509495945050505050565b6020815260006112886020830184611d88565b858782376000868201605b60f81b815285876001830137605d60f81b600191870191820152838560028301376000930160020192835250909695505050505050565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b60005b83811015611e5a578181015183820152602001611e42565b50506000910152565b60008451611e75818460208901611e3f565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b600088516020611eb58285838e01611e3f565b895191840191611ec88184848e01611e3f565b8951920191611eda8184848d01611e3f565b8851920191611eec8184848c01611e3f565b8751920191611efe8184848b01611e3f565b8651920191611f108184848a01611e3f565b8551920191611f228184848901611e3f565b919091019a9950505050505050505050565b83815263ffffffff60e01b8360e01b16602082015260008251611f5e816024850160208701611e3f565b91909101602401949350505050565b600060208284031215611f7f57600080fd5b81516118ea81611a11565b60008151808452611fa2816020860160208601611e3f565b601f01601f19169290920160200192915050565b87815260e060208201526000611fcf60e0830189611f8a565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b60006020828403121561201857600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600081518084526020808501808196508360051b8101915082860160005b85811015612088578284038952612076848351611f8a565b9885019893509084019060010161205e565b5091979650505050505050565b60006101408083526120a98184018e611f8a565b905082810360208401526120bd818d612040565b90508a60408401528960608401528860808401528760a084015282810360c08401526120e98188611d88565b90508560e08401528281036101008401526121048186612040565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526121398184018d611f8a565b9050828103602084015261214d818c612040565b90508960408401528860608401528760808401528660a084015282810360c08401526121798187611d88565b90508460e08401528281036101008401526121948185612040565b9c9b505050505050505050505050565b600086516121b6818460208b01611e3f565b8651908301906121ca818360208b01611e3f565b86519101906121dd818360208a01611e3f565b85519101906121f0818360208901611e3f565b8451910190612203818360208801611e3f565b01979650505050505050565b60018060a01b03851681528360208201526080604082015260006122366080830185611f8a565b82810360608401526122488185611f8a565b979650505050505050565b60006020828403121561226557600080fd5b81516001600160a01b03811681146118ea57600080fdfea2646970667358221220c5f4864ffaecca153bec11056ce20a30a67523a84bbcca4c22a50c212288a81c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c8063b1283e7711610087578063b1283e77146101d4578063b2016bd4146101e7578063b3a297521461020e578063bc8802a214610221578063e0f6683614610248578063ec9790821461025b578063ff5744ac1461026c578063ff8ff7a31461027f57600080fd5b80631ba18b9b146100da5780632ff8d50414610104578063375a7cba146101375780635bd9e2991461014c57806361371325146101735780636cc6cde11461019a57806380f55605146101c1575b600080fd5b6000546100ea9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b60005461011f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100fb565b61013f610292565b6040516100fb9190611849565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b60025461011f906001600160a01b031681565b61011f6101e2366004611896565b6102f4565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f61021c3660046118af565b61031e565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f6102563660046118af565b6105b8565b6001546040519081526020016100fb565b61011f61027a3660046118af565b610913565b61011f61028d3660046118af565b610ac2565b606060018054806020026020016040519081016040528092919081815260200182805480156102ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cc575b5050505050905090565b6001818154811061030457600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600261032f60208401846118f1565b905010156103585760405162461bcd60e51b815260040161034f90611941565b60405180910390fd5b600061036760208401846118f1565b6103739150600161198c565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161038e57905050905061047d6103b285806119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103f49250505060208701876118f1565b61040160a08901896119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104439250505060c08a018a6119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610de392505050565b81600081518110610490576104906119fb565b602002602001018190525060006104dd826000815181106104b3576104b36119fb565b602090810291909101015160026104d261016089016101408a01611a31565b886101200135610efb565b905060006104eb8285611159565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610525576105256119fb565b602090810291909101015260006105ac61053e89611ba8565b6105488a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600260808201528a92509050611291565b98975050505050505050565b60008160e00135826101000135116106245760405162461bcd60e51b815260206004820152602960248201527f7570706572426f756e64206d75737420626520686967686572207468616e206c6044820152681bddd95c909bdd5b9960ba1b606482015260840161034f565b6106316002600019611d2c565b826101000135106106995760405162461bcd60e51b815260206004820152602c60248201527f7570706572426f756e64206d757374206265206c657373207468616e2075696e60448201526b3a191a9b1736b0bc1016901960a11b606482015260840161034f565b6106a660208301836118f1565b90506002146106f25760405162461bcd60e51b815260206004820152601860248201527727baba31b7b6b2b99031b7bab73a1036bab9ba103132901960411b604482015260640161034f565b60408051600180825281830190925260039160009190816020015b606081526020019060019003908161070d5790505090506107ef61073185806119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107739250505060a08701876119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b59250505060c08801886119b5565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061142892505050565b81600081518110610802576108026119fb565b6020026020010181905250600061084482600081518110610825576108256119fb565b602090810291909101015160016104d261016089016101408a01611a31565b905060006108528285611159565b6040805160018082528183019092529192506000919060208083019080368337019050509050828160008151811061088c5761088c6119fb565b602090810291909101015260006105ac6108a589611ba8565b6108af8a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600160808201528a92509050611291565b6000600261092460208401846118f1565b905010156109445760405162461bcd60e51b815260040161034f90611941565b600061095360208401846118f1565b61095f9150600161198c565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161097a57905050905061099e6103b285806119b5565b816000815181106109b1576109b16119fb565b602002602001018190525060006109f3826000815181106109d4576109d46119fb565b602090810291909101015160036104d261016089016101408a01611a31565b90506000610a018285611159565b60408051600180825281830190925291925060009190602080830190803683370190505090508281600081518110610a3b57610a3b6119fb565b602090810291909101015260006105ac610a5489611ba8565b610a5e8a806119b5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600360808201528a92509050611291565b60006002610ad360208401846118f1565b90501015610af35760405162461bcd60e51b815260040161034f90611941565b6000610b0260208401846118f1565b610b0e9150600161198c565b90506000610b1f60208501856118f1565b90506001600160401b03811115610b3857610b3861199f565b604051908082528060200260200182016040528015610b61578160200160208202803683370190505b5090506000610b7360208601866118f1565b90506001600160401b03811115610b8c57610b8c61199f565b604051908082528060200260200182016040528015610bbf57816020015b6060815260200190600190039081610baa5790505b50905060005b610bd260208701876118f1565b9050811015610d2657610c9b610beb60408801886119b5565b610bf860208a018a6118f1565b85818110610c0857610c086119fb565b9050602002810190610c1a91906119b5565b610c2760608c018c6119b5565b604051602001610c3c96959493929190611d3f565b60408051601f19818403018152919052610c5960a08901896119b5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b59250505060c08a018a6119b5565b828281518110610cad57610cad6119fb565b6020026020010181905250610cf7828281518110610ccd57610ccd6119fb565b60209081029190910101516001610cec6101608a016101408b01611a31565b896101200135610efb565b838281518110610d0957610d096119fb565b602090810291909101015280610d1e81611d6f565b915050610bc5565b50600082604051602001610d3a9190611dc3565b6040516020818303038152906040528051906020012090506000610d5e8286611159565b905060006105ac610d6e89611ba8565b610d7b60408b018b6119b5565b610d8860808d018d6119b5565b610d9560608f018f6119b5565b604051602001610daa96959493929190611dd6565b60408051601f1981840301815260a083018252878352602083018a9052908201869052606082018a905260016080830152908790611291565b60606000604051602001610e009062e2909f60e81b815260030190565b6040516020818303038152906040529050600086866000818110610e2657610e266119fb565b9050602002810190610e3891906119b5565b604051602001610e49929190611e18565b60408051601f19818403018152919052905060015b86811015610ec15781888883818110610e7957610e796119fb565b9050602002810190610e8b91906119b5565b604051602001610e9d93929190611e63565b60405160208183030381529060405291508080610eb990611d6f565b915050610e5e565b5087828284888689604051602001610edf9796959493929190611ea2565b6040516020818303038152906040529250505095945050505050565b600080848487604051602001610f1393929190611f34565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110749190611f6d565b63ffffffff16156110885791506111519050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c492611109928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d90600401611fb6565b6020604051808303816000875af1158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190612006565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee754926111b992640100000000909204909116908790879060040161201f565b600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae2935061124792640100000000900416908790879060040161201f565b602060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190612006565b90505b92915050565b60025460009081906112ab906001600160a01b0316611488565b90506112c5836040015184606001518861016001516114fa565b806001600160a01b03166312e24aa48688602001518960e001518a6101000151886040015189600001518a602001518b608001518d600060049054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016113359a99989796959493929190612095565b600060405180830381600087803b15801561134f57600080fd5b505af1158015611363573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928688602001518960e001518a6101000151886040015189600001518a602001518b608001518d6040516113cd99989796959493929190612125565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905595945050505050565b606060006040516020016114459062e2909f60e81b815260030190565b6040516020818303038152906040529050848185838660405160200161146f9594939291906121a4565b6040516020818303038152906040529150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166114f5576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000611507600184611d2c565b905060005b838110156118425760405163856296f760e01b8152600060048201819052602482018790526001831b6044830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190612006565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116679190612006565b9050838314806116925750848381518110611684576116846119fb565b602002602001015151600014155b6116d35760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b604482015260640161034f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f00000000000000000000000000000000000000000000000000000000000000008387871461174a5788878151811061173d5761173d6119fb565b6020026020010151611777565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b88881461179d57898881518110611790576117906119fb565b60200260200101516117ca565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b81526004016117e9949392919061220f565b6020604051808303816000875af1158015611808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182c9190612253565b505050808061183a90611d6f565b91505061150c565b5050505050565b6020808252825182820181905260009190848201906040850190845b8181101561188a5783516001600160a01b031683529284019291840191600101611865565b50909695505050505050565b6000602082840312156118a857600080fd5b5035919050565b6000602082840312156118c157600080fd5b81356001600160401b038111156118d757600080fd5b820161018081850312156118ea57600080fd5b9392505050565b6000808335601e1984360301811261190857600080fd5b8301803591506001600160401b0382111561192257600080fd5b6020019150600581901b360382131561193a57600080fd5b9250929050565b6020808252818101527f4f7574636f6d657320636f756e74206d7573742062652032206f72206d6f7265604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561128b5761128b611976565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126119cc57600080fd5b8301803591506001600160401b038211156119e657600080fd5b60200191503681900382131561193a57600080fd5b634e487b7160e01b600052603260045260246000fd5b63ffffffff81168114611a2357600080fd5b50565b80356114f581611a11565b600060208284031215611a4357600080fd5b81356118ea81611a11565b60405161018081016001600160401b0381118282101715611a7157611a7161199f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611a9f57611a9f61199f565b604052919050565b600082601f830112611ab857600080fd5b81356001600160401b03811115611ad157611ad161199f565b611ae4601f8201601f1916602001611a77565b818152846020838601011115611af957600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611b2757600080fd5b813560206001600160401b0380831115611b4357611b4361199f565b8260051b611b52838201611a77565b9384528581018301938381019088861115611b6c57600080fd5b84880192505b858310156105ac57823584811115611b8a5760008081fd5b611b988a87838c0101611aa7565b8352509184019190840190611b72565b60006101808236031215611bbb57600080fd5b611bc3611a4e565b82356001600160401b0380821115611bda57600080fd5b611be636838701611aa7565b83526020850135915080821115611bfc57600080fd5b611c0836838701611b16565b60208401526040850135915080821115611c2157600080fd5b611c2d36838701611aa7565b60408401526060850135915080821115611c4657600080fd5b611c5236838701611aa7565b60608401526080850135915080821115611c6b57600080fd5b611c7736838701611aa7565b608084015260a0850135915080821115611c9057600080fd5b611c9c36838701611aa7565b60a084015260c0850135915080821115611cb557600080fd5b611cc136838701611aa7565b60c084015260e08581013590840152610100808601359084015261012080860135908401526101409150611cf6828601611a26565b8284015261016091508185013581811115611d1057600080fd5b611d1c36828801611b16565b8385015250505080915050919050565b8181038181111561128b5761128b611976565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b600060018201611d8157611d81611976565b5060010190565b600081518084526020808501945080840160005b83811015611db857815187529582019590820190600101611d9c565b509495945050505050565b6020815260006112886020830184611d88565b858782376000868201605b60f81b815285876001830137605d60f81b600191870191820152838560028301376000930160020192835250909695505050505050565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b60005b83811015611e5a578181015183820152602001611e42565b50506000910152565b60008451611e75818460208901611e3f565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b600088516020611eb58285838e01611e3f565b895191840191611ec88184848e01611e3f565b8951920191611eda8184848d01611e3f565b8851920191611eec8184848c01611e3f565b8751920191611efe8184848b01611e3f565b8651920191611f108184848a01611e3f565b8551920191611f228184848901611e3f565b919091019a9950505050505050505050565b83815263ffffffff60e01b8360e01b16602082015260008251611f5e816024850160208701611e3f565b91909101602401949350505050565b600060208284031215611f7f57600080fd5b81516118ea81611a11565b60008151808452611fa2816020860160208601611e3f565b601f01601f19169290920160200192915050565b87815260e060208201526000611fcf60e0830189611f8a565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b60006020828403121561201857600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600081518084526020808501808196508360051b8101915082860160005b85811015612088578284038952612076848351611f8a565b9885019893509084019060010161205e565b5091979650505050505050565b60006101408083526120a98184018e611f8a565b905082810360208401526120bd818d612040565b90508a60408401528960608401528860808401528760a084015282810360c08401526120e98188611d88565b90508560e08401528281036101008401526121048186612040565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526121398184018d611f8a565b9050828103602084015261214d818c612040565b90508960408401528860608401528760808401528660a084015282810360c08401526121798187611d88565b90508460e08401528281036101008401526121948185612040565b9c9b505050505050505050505050565b600086516121b6818460208b01611e3f565b8651908301906121ca818360208b01611e3f565b86519101906121dd818360208a01611e3f565b85519101906121f0818360208901611e3f565b8451910190612203818360208801611e3f565b01979650505050505050565b60018060a01b03851681528360208201526080604082015260006122366080830185611f8a565b82810360608401526122488185611f8a565b979650505050505050565b60006020828403121561226557600080fd5b81516001600160a01b03811681146118ea57600080fdfea2646970667358221220c5f4864ffaecca153bec11056ce20a30a67523a84bbcca4c22a50c212288a81c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "events": {
      "NewMarket(address,string,string[],uint256,uint256,bytes32,bytes32,bytes32[],uint256,string[])": {
        "details": "To be emitted when a new market is created"
      }
    },
    "kind": "dev",
    "methods": {
      "allMarkets()": {
        "details": "Returns all the markets created by this factory",
        "returns": {
          "_0": "The addresses of the markets"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_questionTimeout": "Reality question timeout.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      },
      "createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Scalar market"
      },
      "createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Scalar market. Reverts if a market with the same question already exists."
      },
      "marketCount()": {
        "returns": {
          "_0": "The amount of markets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Categorical markets are associated with a Reality question that has only one answer"
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Categorical markets are associated with a Reality question that has one or more answers"
      },
      "createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value"
      },
      "createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Scalar markets are associated with a Reality question that resolves to a numeric value"
      },
      "marketCount()": {
        "notice": "Returns the amount of markets created by this factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1089,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "questionTimeout",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1105,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "realityProxy",
        "offset": 4,
        "slot": "0",
        "type": "t_contract(RealityProxy)3196"
      },
      {
        "astId": 1108,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1110,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3196": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}