{
  "address": "0xf68fF43B643Df752132463AA1dBc9c75D7349D07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergeToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "outcomeIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "outcomeIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeemToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savingsXDaiAdapter",
      "outputs": [
        {
          "internalType": "contract ISavingsXDaiAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "splitFromBase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd54aa0124e17f41cdf587da7929ee2af269cb176ee88a1cdd0e22d69e2e9f4c1",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xf68fF43B643Df752132463AA1dBc9c75D7349D07",
    "transactionIndex": 4,
    "gasUsed": "2401674",
    "logsBloom": "0x
    "blockHash": "0x2a6722d648bc5c2152a02cfb3cf8ea30921558d14f6c4ff70ca2e2eb1fb82b27",
    "transactionHash": "0xd54aa0124e17f41cdf587da7929ee2af269cb176ee88a1cdd0e22d69e2e9f4c1",
    "logs": [],
    "blockNumber": 36154506,
    "cumulativeGasUsed": "2923769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xD194319D1804C1051DD21Ba1Dc931cA72410B79f"
  ],
  "numDeployments": 11,
  "solcInputHash": "4f253f35a863d7f234ed79fcc65a1b76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"outcomeIndexes\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"outcomeIndexes\",\"type\":\"uint256[]\"}],\"name\":\"redeemToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savingsXDaiAdapter\",\"outputs\":[{\"internalType\":\"contract ISavingsXDaiAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"splitFromBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Router implementation with functions to interact with xDAI on Gnosis Chain.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract.\",\"_wrapped1155Factory\":\"Wrapped1155Factory contract.\"}},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"conditionId\":\"The id of the condition used to redeem.\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection.\",\"parentCollectionId\":\"The Conditional Tokens parent collection id.\"},\"returns\":{\"_0\":\"The token id.\"}},\"getWinningOutcomes(bytes32)\":{\"params\":{\"conditionId\":\"The id of the condition.\"},\"returns\":{\"_0\":\"An array of outcomes where a true value indicates that the outcome is redeemable.\"}},\"mergePositions(address,address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of outcome tokens to merge.\",\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to merge.\"}},\"mergeToBase(address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"amount\":\"The amount of outcome tokens to merge.\",\"market\":\"The Market to merge.\"}},\"redeemPositions(address,address,uint256[])\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to redeem.\",\"outcomeIndexes\":\"The index of the outcomes to redeem.\"}},\"redeemToBase(address,uint256[])\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"market\":\"The Market to redeem.\",\"outcomeIndexes\":\"The index of the outcomes to redeem.\"}},\"splitFromBase(address)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"market\":\"The Market to split.\"}},\"splitPosition(address,address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of collateral to split.\",\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to split.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"sDAI\":{\"details\":\"sDAI address.\"},\"savingsXDaiAdapter\":{\"details\":\"SavingsXDaiAdapter address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenId(address,bytes32,bytes32,uint256)\":{\"notice\":\"Constructs a tokenId from a collateral token and an outcome collection.\"},\"getWinningOutcomes(bytes32)\":{\"notice\":\"Helper function used to know the redeemable outcomes associated to a conditionId.\"},\"mergePositions(address,address,uint256)\":{\"notice\":\"Merges positions and sends the collateral tokens to the user.\"},\"mergeToBase(address,uint256)\":{\"notice\":\"Merges positions and sends xDAI to the user.\"},\"redeemPositions(address,address,uint256[])\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"redeemToBase(address,uint256[])\":{\"notice\":\"Redeems positions and sends xDAI to the user.\"},\"splitFromBase(address)\":{\"notice\":\"Splits a position using xDAI and sends the ERC20 outcome tokens back to the user.\"},\"splitPosition(address,address,uint256)\":{\"notice\":\"Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GnosisRouter.sol\":\"GnosisRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/GnosisRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Router.sol\\\";\\n\\ninterface ISavingsXDaiAdapter {\\n    function depositXDAI(address receiver) external payable returns (uint256);\\n\\n    function redeemXDAI(uint256 shares, address receiver) external payable returns (uint256);\\n}\\n\\n/// @dev Router implementation with functions to interact with xDAI on Gnosis Chain.\\ncontract GnosisRouter is Router {\\n    /// @dev sDAI address.\\n    IERC20 public constant sDAI = IERC20(0xaf204776c7245bF4147c2612BF6e5972Ee483701);\\n    /// @dev SavingsXDaiAdapter address.\\n    ISavingsXDaiAdapter public constant savingsXDaiAdapter =\\n        ISavingsXDaiAdapter(0xD499b51fcFc66bd31248ef4b28d656d67E591A94);\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract.\\n    /// @param _wrapped1155Factory Wrapped1155Factory contract.\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IWrapped1155Factory _wrapped1155Factory\\n    ) Router(_conditionalTokens, _wrapped1155Factory) {}\\n\\n    /// @notice Splits a position using xDAI and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param market The Market to split.\\n    function splitFromBase(Market market) external payable {\\n        uint256 shares = savingsXDaiAdapter.depositXDAI{value: msg.value}(address(this));\\n\\n        _splitPosition(sDAI, market, shares);\\n    }\\n\\n    /// @notice Merges positions and sends xDAI to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param market The Market to merge.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function mergeToBase(Market market, uint256 amount) external {\\n        _mergePositions(sDAI, market, amount);\\n\\n        sDAI.approve(address(savingsXDaiAdapter), amount);\\n        savingsXDaiAdapter.redeemXDAI(amount, msg.sender);\\n    }\\n\\n    /// @notice Redeems positions and sends xDAI to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param market The Market to redeem.\\n    /// @param outcomeIndexes The index of the outcomes to redeem.\\n    function redeemToBase(Market market, uint256[] calldata outcomeIndexes) external {\\n        uint256 initialBalance = sDAI.balanceOf(address(this));\\n\\n        _redeemPositions(sDAI, market, outcomeIndexes);\\n\\n        uint256 finalBalance = sDAI.balanceOf(address(this));\\n\\n        if (finalBalance > initialBalance) {\\n            sDAI.approve(address(savingsXDaiAdapter), finalBalance - initialBalance);\\n            savingsXDaiAdapter.redeemXDAI(finalBalance - initialBalance, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b0f682adba4d2949352d2a9c419431d7fa8f5733f9e84bcf7c6f3a9ec06945a\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a66fb5758a0ca15b706a7d9a163505803103930acd58c188565a88e81499fa3\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"},\"src/Router.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IERC20, IWrapped1155Factory} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @dev The Router contract replicates the main Conditional Tokens functions, but allowing to work with ERC20 outcomes instead of the ERC1155.\\ncontract Router is ERC1155Holder {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Wrapped1155Factory contract.\\n    IWrapped1155Factory public immutable wrapped1155Factory;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract.\\n    /// @param _wrapped1155Factory Wrapped1155Factory contract.\\n    constructor(IConditionalTokens _conditionalTokens, IWrapped1155Factory _wrapped1155Factory) {\\n        conditionalTokens = _conditionalTokens;\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @notice Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to split.\\n    /// @param amount The amount of collateral to split.\\n    function splitPosition(IERC20 collateralToken, Market market, uint256 amount) public {\\n        if (market.parentCollectionId() == bytes32(0)) {\\n            // transfer the collateral tokens to the Router.\\n            collateralToken.transferFrom(msg.sender, address(this), amount);\\n        }\\n        _splitPosition(collateralToken, market, amount);\\n    }\\n\\n    /// @notice Splits a position and sends the ERC20 outcome tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to split.\\n    /// @param amount The amount of collateral to split.\\n    function _splitPosition(IERC20 collateralToken, Market market, uint256 amount) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n\\n        uint256[] memory partition = getPartition(conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's splitting from a parent position, so we need to unwrap these tokens first because they will be burnt to mint the child outcome tokens.\\n            (IERC20 wrapped1155, bytes memory data) = market.parentWrappedOutcome();\\n\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        } else {\\n            collateralToken.approve(address(conditionalTokens), amount);\\n        }\\n\\n        conditionalTokens.splitPosition(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        // wrap & transfer the minted outcome tokens.\\n        for (uint256 j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, partition[j]);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(j);\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Merges positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to merge.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function mergePositions(IERC20 collateralToken, Market market, uint256 amount) public {\\n        _mergePositions(collateralToken, market, amount);\\n\\n        if (market.parentCollectionId() == bytes32(0)) {\\n            // send collateral tokens back to the user.\\n            collateralToken.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Merges positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to merge.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function _mergePositions(IERC20 collateralToken, Market market, uint256 amount) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n\\n        uint256[] memory partition = getPartition(conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        // we need to unwrap the outcome tokens because they will be burnt during the merge.\\n\\n        for (uint256 j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, partition[j]);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(j);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        }\\n\\n        conditionalTokens.mergePositions(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's merging from a parent position, so we need to wrap these tokens and send them back to the user.\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.parentWrappedOutcome();\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to redeem.\\n    /// @param outcomeIndexes The index of the outcomes to redeem.\\n    function redeemPositions(IERC20 collateralToken, Market market, uint256[] calldata outcomeIndexes) public {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        uint256 initialBalance;\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            initialBalance = collateralToken.balanceOf(address(this));\\n        }\\n\\n        _redeemPositions(collateralToken, market, outcomeIndexes);\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n            if (finalBalance > initialBalance) {\\n                collateralToken.transfer(msg.sender, finalBalance - initialBalance);\\n            }\\n        }\\n    }\\n\\n    /// @notice Redeems positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to redeem.\\n    /// @param outcomeIndexes The index of the outcomes to redeem.\\n    function _redeemPositions(IERC20 collateralToken, Market market, uint256[] calldata outcomeIndexes) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n        uint256 tokenId = 0;\\n\\n        uint256[] memory indexSets = new uint256[](outcomeIndexes.length);\\n\\n        for (uint256 j = 0; j < outcomeIndexes.length; j++) {\\n            indexSets[j] = 1 << outcomeIndexes[j];\\n            tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, indexSets[j]);\\n\\n            // first we need to unwrap the outcome tokens that will be redeemed.\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(outcomeIndexes[j]);\\n            uint256 amount = wrapped1155.balanceOf(msg.sender);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        }\\n\\n        uint256 initialBalance = 0;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, the user may already have parent tokens so we need to track the balance change.\\n            tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n            initialBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n        }\\n\\n        conditionalTokens.redeemPositions(address(collateralToken), parentCollectionId, conditionId, indexSets);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, redeemPositions() returned outcome tokens of the parent market. We need to wrap and send them to the user.\\n            uint256 finalBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n\\n            if (finalBalance > initialBalance) {\\n                // wrap to erc20.\\n                (IERC20 parentWrapped1155, bytes memory parentData) = market.parentWrappedOutcome();\\n\\n                conditionalTokens.safeTransferFrom(\\n                    address(this), address(wrapped1155Factory), tokenId, finalBalance - initialBalance, parentData\\n                );\\n\\n                // transfer the ERC20 back to the user.\\n                parentWrapped1155.transfer(msg.sender, finalBalance - initialBalance);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a partition containing the full set of outcomes.\\n    /// @param size Number of outcome slots.\\n    /// @return The partition containing the full set of outcomes.\\n    function getPartition(uint256 size) internal pure returns (uint256[] memory) {\\n        uint256[] memory partition = new uint256[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            partition[i] = 1 << i;\\n        }\\n\\n        return partition;\\n    }\\n\\n    /// @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param parentCollectionId The Conditional Tokens parent collection id.\\n    /// @param conditionId The id of the condition used to redeem.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    /// @return The token id.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet);\\n        return conditionalTokens.getPositionId(address(collateralToken), collectionId);\\n    }\\n\\n    /// @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    /// @param conditionId The id of the condition.\\n    /// @return An array of outcomes where a true value indicates that the outcome is redeemable.\\n    function getWinningOutcomes(bytes32 conditionId) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0 ? false : true;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6594a0e8184d2eb02633f0bd0974303d37366dcf7b7773020dcd01702f2bd475\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002c1538038062002c15833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051612a8e620001876000396000818161014101528181611157015281816113fd01528181611734015281816119b001528181611d9101526121260152600081816101c5015281816103a30152818161047a01528181610568015281816105ed01528181610f310152818161103c015281816111840152818161121201528181611298015281816113ce015281816115b801528181611761015281816117f1015281816118820152818161198101528181611dbe01528181611e5601528181611ee701528181611f770152818161200501526120fe0152612a8e6000f3fe6080604052600436106100c85760003560e01c8063abf7e2731161007a578063abf7e27314610207578063bc197c811461022f578063d5f8228014610274578063d6d150d114610294578063d953260d146102b4578063de8b6149146102d4578063f23a6e61146102fc578063f677c0361461032857600080fd5b806301ffc9a7146100cd57806302bd74c314610102578063150c5b971461012f5780631a09424a1461017057806350d9991c1461019e5780635bd9e299146101b35780637abef8d1146101e7575b600080fd5b3480156100d957600080fd5b506100ed6100e83660046122b6565b610348565b60405190151581526020015b60405180910390f35b34801561010e57600080fd5b5061012261011d3660046122e7565b61037f565b6040516100f99190612300565b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516100f99190612346565b34801561017c57600080fd5b5061019061018b366004612372565b610537565b6040519081526020016100f9565b6101b16101ac3660046123ad565b61066f565b005b3480156101bf57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b3480156101f357600080fd5b506101b16102023660046123ca565b610713565b34801561021357600080fd5b5061016373d499b51fcfc66bd31248ef4b28d656d67e591a9481565b34801561023b57600080fd5b5061025b61024a36600461254d565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100f9565b34801561028057600080fd5b506101b161028f3660046123ca565b610801565b3480156102a057600080fd5b506101b16102af3660046125fa565b6108ec565b3480156102c057600080fd5b506101b16102cf366004612671565b610a18565b3480156102e057600080fd5b5061016373af204776c7245bf4147c2612bf6e5972ee48370181565b34801561030857600080fd5b5061025b6103173660046126c5565b63f23a6e6160e01b95945050505050565b34801561033457600080fd5b506101b161034336600461272d565b610c6d565b60006001600160e01b03198216630271189760e51b148061037957506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190612791565b6001600160401b038111156104255761042561240b565b60405190808252806020026020018201604052801561044e578160200160208202803683370190505b50905060005b815181101561053057604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190612791565b156104f95760016104fc565b60005b82828151811061050e5761050e6127aa565b9115156020928302919091019091015280610528816127d6565b915050610454565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190612791565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd75309061062490899085906004016127ef565b602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190612791565b9695505050505050565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b9034906106ab903090600401612346565b60206040518083038185885af11580156106c9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106ee9190612791565b905061070f73af204776c7245bf4147c2612bf6e5972ee4837018383610e5e565b5050565b61071e8383836114e5565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190612791565b036107fc5760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906107b790339085906004016127ef565b6020604051808303816000875af11580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612808565b505b505050565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190612791565b036108e1576040516323b872dd60e01b81526001600160a01b038416906323b872dd9061089c9033903090869060040161282a565b6020604051808303816000875af11580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612808565b505b6107fc838383610e5e565b61090b73af204776c7245bf4147c2612bf6e5972ee48370183836114e5565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b3906109589073d499b51fcfc66bd31248ef4b28d656d67e591a949085906004016127ef565b6020604051808303816000875af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612808565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af11580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190612791565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a52903090600401612346565b6020604051808303816000875af1158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190612791565b9050610ab773af204776c7245bf4147c2612bf6e5972ee483701858585611a8d565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610af1903090600401612346565b6020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612791565b905081811115610c665773af204776c7245bf4147c2612bf6e5972ee48370163095ea7b373d499b51fcfc66bd31248ef4b28d656d67e591a94610b77858561284e565b6040518363ffffffff1660e01b8152600401610b949291906127ef565b6020604051808303816000875af1158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190612808565b5073d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610bfc848461284e565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190612791565b505b5050505050565b6000836001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612791565b9050600081610d4c576040516370a0823160e01b81526001600160a01b038716906370a0823190610d06903090600401612346565b6020604051808303816000875af1158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190612791565b90505b610d5886868686611a8d565b81610c64576040516370a0823160e01b81526000906001600160a01b038816906370a0823190610d8c903090600401612346565b6020604051808303816000875af1158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf9190612791565b905081811115610e55576001600160a01b03871663a9059cbb33610df3858561284e565b6040518363ffffffff1660e01b8152600401610e109291906127ef565b6020604051808303816000875af1158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190612808565b505b50505050505050565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612791565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190612791565b90506000610fc37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610f7d91815260200190565b602060405180830381865afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190612791565b61222f565b905082156111ee57600080866001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110349190810190612885565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd75308a886040518363ffffffff1660e01b81526004016110889291906127ef565b602060405180830381865afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190612791565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd906110fc90339030908c9060040161282a565b6020604051808303816000875af115801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906111b4907f00000000000000000000000000000000000000000000000000000000000000009085908c903090899060040161293d565b600060405180830381600087803b1580156111ce57600080fd5b505af11580156111e2573d6000803e3d6000fd5b50505050505050611281565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b39061123c907f00000000000000000000000000000000000000000000000000000000000000009088906004016127ef565b6020604051808303816000875af115801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190612808565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce4275906112d59089908790879087908b906004016129b2565b600060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b5050505060005b8151811015610e5557600061133a88868686868151811061132d5761132d6127aa565b6020026020010151610537565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b815260040161136d91815260200190565b600060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b29190810190612885565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a9061142b9030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016129f1565b600060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb915061148b9033908c906004016127ef565b6020604051808303816000875af11580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce9190612808565b5050505080806114dd906127d6565b91505061130a565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115499190612791565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190612791565b905060006116047f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610f7d91815260200190565b905060005b81518110156117d957600061162c88868686868151811061132d5761132d6127aa565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b815260040161165f91815260200190565b600060405180830381865afa15801561167c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116a49190810190612885565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd906116d990339030908d9060040161282a565b6020604051808303816000875af11580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611791907f00000000000000000000000000000000000000000000000000000000000000009087908d903090889060040161293d565b600060405180830381600087803b1580156117ab57600080fd5b505af11580156117bf573d6000803e3d6000fd5b5050505050505080806117d1906127d6565b915050611609565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad9061182e9089908790879087908b906004016129b2565b600060405180830381600087803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b505084159150610c6490505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906118b9908a9088906004016127ef565b602060405180830381865afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa9190612791565b9050600080876001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119659190810190612885565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906119de9030907f00000000000000000000000000000000000000000000000000000000000000009088908d9088906004016129f1565b600060405180830381600087803b1580156119f857600080fd5b505af1158015611a0c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150611a3e9033908b906004016127ef565b6020604051808303816000875af1158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190612808565b50505050505050505050565b6000836001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af19190612791565b90506000846001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190612791565b9050600080846001600160401b03811115611b7457611b7461240b565b604051908082528060200260200182016040528015611b9d578160200160208202803683370190505b50905060005b85811015611e3657868682818110611bbd57611bbd6127aa565b905060200201356001901b828281518110611bda57611bda6127aa565b602002602001018181525050611bfe89868685858151811061132d5761132d6127aa565b9250600080896001600160a01b03166318a988a88a8a86818110611c2457611c246127aa565b905060200201356040518263ffffffff1660e01b8152600401611c4991815260200190565b600060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c8e9190810190612885565b915091506000826001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611cc09190612346565b6020604051808303816000875af1158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d039190612791565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd90611d369033903090869060040161282a565b6020604051808303816000875af1158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611dee907f0000000000000000000000000000000000000000000000000000000000000000908a9086903090899060040161293d565b600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b505050505050508080611e2e906127d6565b915050611ba3565b5060008415611f615760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611e8d908c9089906004016127ef565b602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190612791565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611f1d90309087906004016127ef565b602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190612791565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c90611fb2908c90899089908890600401612a2b565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505086159150612224905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061203b90309088906004016127ef565b602060405180830381865afa158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c9190612791565b905081811115611a81576000808a6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156120c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120ef9190810190612885565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f000000000000000000000000000000000000000000000000000000000000000089612150898961284e565b866040518663ffffffff1660e01b81526004016121719594939291906129f1565b600060405180830381600087803b15801561218b57600080fd5b505af115801561219f573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb3386866121bf919061284e565b6040518363ffffffff1660e01b81526004016121dc9291906127ef565b6020604051808303816000875af11580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221f9190612808565b505050505b505050505050505050565b60606000826001600160401b0381111561224b5761224b61240b565b604051908082528060200260200182016040528015612274578160200160208202803683370190505b50905060005b8381101561053057806001901b828281518110612299576122996127aa565b6020908102919091010152806122ae816127d6565b91505061227a565b6000602082840312156122c857600080fd5b81356001600160e01b0319811681146122e057600080fd5b9392505050565b6000602082840312156122f957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561233a57835115158352928401929184019160010161231c565b50909695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461236f57600080fd5b50565b6000806000806080858703121561238857600080fd5b84356123938161235a565b966020860135965060408601359560600135945092505050565b6000602082840312156123bf57600080fd5b81356122e08161235a565b6000806000606084860312156123df57600080fd5b83356123ea8161235a565b925060208401356123fa8161235a565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156124495761244961240b565b604052919050565b600082601f83011261246257600080fd5b813560206001600160401b0382111561247d5761247d61240b565b8160051b61248c828201612421565b92835284810182019282810190878511156124a657600080fd5b83870192505b848310156124c5578235825291830191908301906124ac565b979650505050505050565b60006001600160401b038211156124e9576124e961240b565b50601f01601f191660200190565b600082601f83011261250857600080fd5b813561251b612516826124d0565b612421565b81815284602083860101111561253057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561256557600080fd5b85356125708161235a565b945060208601356125808161235a565b935060408601356001600160401b038082111561259c57600080fd5b6125a889838a01612451565b945060608801359150808211156125be57600080fd5b6125ca89838a01612451565b935060808801359150808211156125e057600080fd5b506125ed888289016124f7565b9150509295509295909350565b6000806040838503121561260d57600080fd5b82356126188161235a565b946020939093013593505050565b60008083601f84011261263857600080fd5b5081356001600160401b0381111561264f57600080fd5b6020830191508360208260051b850101111561266a57600080fd5b9250929050565b60008060006040848603121561268657600080fd5b83356126918161235a565b925060208401356001600160401b038111156126ac57600080fd5b6126b886828701612626565b9497909650939450505050565b600080600080600060a086880312156126dd57600080fd5b85356126e88161235a565b945060208601356126f88161235a565b9350604086013592506060860135915060808601356001600160401b0381111561272157600080fd5b6125ed888289016124f7565b6000806000806060858703121561274357600080fd5b843561274e8161235a565b9350602085013561275e8161235a565b925060408501356001600160401b0381111561277957600080fd5b61278587828801612626565b95989497509550505050565b6000602082840312156127a357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127e8576127e86127c0565b5060010190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561281a57600080fd5b815180151581146122e057600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b81810381811115610379576103796127c0565b60005b8381101561287c578181015183820152602001612864565b50506000910152565b6000806040838503121561289857600080fd5b82516128a38161235a565b60208401519092506001600160401b038111156128bf57600080fd5b8301601f810185136128d057600080fd5b80516128de612516826124d0565b8181528660208385010111156128f357600080fd5b612904826020830160208601612861565b8093505050509250929050565b60008151808452612929816020860160208601612861565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a0608082018190526000906124c590830184612911565b600081518084526020808501945080840160005b838110156129a75781518752958201959082019060010161298b565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006129df60a0830185612977565b90508260808301529695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124c590830184612911565b60018060a01b0385168152836020820152826040820152608060608201526000610665608083018461297756fea264697066735822122067a78f827fb919b24e3bd901d1cdf3bd5463a411725d5f30f6e7547fb8ec775164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100c85760003560e01c8063abf7e2731161007a578063abf7e27314610207578063bc197c811461022f578063d5f8228014610274578063d6d150d114610294578063d953260d146102b4578063de8b6149146102d4578063f23a6e61146102fc578063f677c0361461032857600080fd5b806301ffc9a7146100cd57806302bd74c314610102578063150c5b971461012f5780631a09424a1461017057806350d9991c1461019e5780635bd9e299146101b35780637abef8d1146101e7575b600080fd5b3480156100d957600080fd5b506100ed6100e83660046122b6565b610348565b60405190151581526020015b60405180910390f35b34801561010e57600080fd5b5061012261011d3660046122e7565b61037f565b6040516100f99190612300565b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516100f99190612346565b34801561017c57600080fd5b5061019061018b366004612372565b610537565b6040519081526020016100f9565b6101b16101ac3660046123ad565b61066f565b005b3480156101bf57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b3480156101f357600080fd5b506101b16102023660046123ca565b610713565b34801561021357600080fd5b5061016373d499b51fcfc66bd31248ef4b28d656d67e591a9481565b34801561023b57600080fd5b5061025b61024a36600461254d565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100f9565b34801561028057600080fd5b506101b161028f3660046123ca565b610801565b3480156102a057600080fd5b506101b16102af3660046125fa565b6108ec565b3480156102c057600080fd5b506101b16102cf366004612671565b610a18565b3480156102e057600080fd5b5061016373af204776c7245bf4147c2612bf6e5972ee48370181565b34801561030857600080fd5b5061025b6103173660046126c5565b63f23a6e6160e01b95945050505050565b34801561033457600080fd5b506101b161034336600461272d565b610c6d565b60006001600160e01b03198216630271189760e51b148061037957506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190612791565b6001600160401b038111156104255761042561240b565b60405190808252806020026020018201604052801561044e578160200160208202803683370190505b50905060005b815181101561053057604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190612791565b156104f95760016104fc565b60005b82828151811061050e5761050e6127aa565b9115156020928302919091019091015280610528816127d6565b915050610454565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190612791565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd75309061062490899085906004016127ef565b602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190612791565b9695505050505050565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b9034906106ab903090600401612346565b60206040518083038185885af11580156106c9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106ee9190612791565b905061070f73af204776c7245bf4147c2612bf6e5972ee4837018383610e5e565b5050565b61071e8383836114e5565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190612791565b036107fc5760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906107b790339085906004016127ef565b6020604051808303816000875af11580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612808565b505b505050565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190612791565b036108e1576040516323b872dd60e01b81526001600160a01b038416906323b872dd9061089c9033903090869060040161282a565b6020604051808303816000875af11580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612808565b505b6107fc838383610e5e565b61090b73af204776c7245bf4147c2612bf6e5972ee48370183836114e5565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b3906109589073d499b51fcfc66bd31248ef4b28d656d67e591a949085906004016127ef565b6020604051808303816000875af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612808565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af11580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190612791565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a52903090600401612346565b6020604051808303816000875af1158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190612791565b9050610ab773af204776c7245bf4147c2612bf6e5972ee483701858585611a8d565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610af1903090600401612346565b6020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612791565b905081811115610c665773af204776c7245bf4147c2612bf6e5972ee48370163095ea7b373d499b51fcfc66bd31248ef4b28d656d67e591a94610b77858561284e565b6040518363ffffffff1660e01b8152600401610b949291906127ef565b6020604051808303816000875af1158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190612808565b5073d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610bfc848461284e565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190612791565b505b5050505050565b6000836001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612791565b9050600081610d4c576040516370a0823160e01b81526001600160a01b038716906370a0823190610d06903090600401612346565b6020604051808303816000875af1158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190612791565b90505b610d5886868686611a8d565b81610c64576040516370a0823160e01b81526000906001600160a01b038816906370a0823190610d8c903090600401612346565b6020604051808303816000875af1158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf9190612791565b905081811115610e55576001600160a01b03871663a9059cbb33610df3858561284e565b6040518363ffffffff1660e01b8152600401610e109291906127ef565b6020604051808303816000875af1158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e539190612808565b505b50505050505050565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612791565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190612791565b90506000610fc37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610f7d91815260200190565b602060405180830381865afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190612791565b61222f565b905082156111ee57600080866001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110349190810190612885565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd75308a886040518363ffffffff1660e01b81526004016110889291906127ef565b602060405180830381865afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190612791565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd906110fc90339030908c9060040161282a565b6020604051808303816000875af115801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906111b4907f00000000000000000000000000000000000000000000000000000000000000009085908c903090899060040161293d565b600060405180830381600087803b1580156111ce57600080fd5b505af11580156111e2573d6000803e3d6000fd5b50505050505050611281565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b39061123c907f00000000000000000000000000000000000000000000000000000000000000009088906004016127ef565b6020604051808303816000875af115801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190612808565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce4275906112d59089908790879087908b906004016129b2565b600060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b5050505060005b8151811015610e5557600061133a88868686868151811061132d5761132d6127aa565b6020026020010151610537565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b815260040161136d91815260200190565b600060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b29190810190612885565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a9061142b9030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016129f1565b600060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb915061148b9033908c906004016127ef565b6020604051808303816000875af11580156114aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce9190612808565b5050505080806114dd906127d6565b91505061130a565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115499190612791565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190612791565b905060006116047f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610f7d91815260200190565b905060005b81518110156117d957600061162c88868686868151811061132d5761132d6127aa565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b815260040161165f91815260200190565b600060405180830381865afa15801561167c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116a49190810190612885565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd906116d990339030908d9060040161282a565b6020604051808303816000875af11580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611791907f00000000000000000000000000000000000000000000000000000000000000009087908d903090889060040161293d565b600060405180830381600087803b1580156117ab57600080fd5b505af11580156117bf573d6000803e3d6000fd5b5050505050505080806117d1906127d6565b915050611609565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad9061182e9089908790879087908b906004016129b2565b600060405180830381600087803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b505084159150610c6490505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906118b9908a9088906004016127ef565b602060405180830381865afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa9190612791565b9050600080876001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119659190810190612885565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906119de9030907f00000000000000000000000000000000000000000000000000000000000000009088908d9088906004016129f1565b600060405180830381600087803b1580156119f857600080fd5b505af1158015611a0c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150611a3e9033908b906004016127ef565b6020604051808303816000875af1158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190612808565b50505050505050505050565b6000836001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af19190612791565b90506000846001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190612791565b9050600080846001600160401b03811115611b7457611b7461240b565b604051908082528060200260200182016040528015611b9d578160200160208202803683370190505b50905060005b85811015611e3657868682818110611bbd57611bbd6127aa565b905060200201356001901b828281518110611bda57611bda6127aa565b602002602001018181525050611bfe89868685858151811061132d5761132d6127aa565b9250600080896001600160a01b03166318a988a88a8a86818110611c2457611c246127aa565b905060200201356040518263ffffffff1660e01b8152600401611c4991815260200190565b600060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c8e9190810190612885565b915091506000826001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611cc09190612346565b6020604051808303816000875af1158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d039190612791565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd90611d369033903090869060040161282a565b6020604051808303816000875af1158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190612808565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611dee907f0000000000000000000000000000000000000000000000000000000000000000908a9086903090899060040161293d565b600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b505050505050508080611e2e906127d6565b915050611ba3565b5060008415611f615760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611e8d908c9089906004016127ef565b602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece9190612791565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611f1d90309087906004016127ef565b602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190612791565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c90611fb2908c90899089908890600401612a2b565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505086159150612224905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061203b90309088906004016127ef565b602060405180830381865afa158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c9190612791565b905081811115611a81576000808a6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156120c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120ef9190810190612885565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f000000000000000000000000000000000000000000000000000000000000000089612150898961284e565b866040518663ffffffff1660e01b81526004016121719594939291906129f1565b600060405180830381600087803b15801561218b57600080fd5b505af115801561219f573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb3386866121bf919061284e565b6040518363ffffffff1660e01b81526004016121dc9291906127ef565b6020604051808303816000875af11580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221f9190612808565b505050505b505050505050505050565b60606000826001600160401b0381111561224b5761224b61240b565b604051908082528060200260200182016040528015612274578160200160208202803683370190505b50905060005b8381101561053057806001901b828281518110612299576122996127aa565b6020908102919091010152806122ae816127d6565b91505061227a565b6000602082840312156122c857600080fd5b81356001600160e01b0319811681146122e057600080fd5b9392505050565b6000602082840312156122f957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561233a57835115158352928401929184019160010161231c565b50909695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461236f57600080fd5b50565b6000806000806080858703121561238857600080fd5b84356123938161235a565b966020860135965060408601359560600135945092505050565b6000602082840312156123bf57600080fd5b81356122e08161235a565b6000806000606084860312156123df57600080fd5b83356123ea8161235a565b925060208401356123fa8161235a565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156124495761244961240b565b604052919050565b600082601f83011261246257600080fd5b813560206001600160401b0382111561247d5761247d61240b565b8160051b61248c828201612421565b92835284810182019282810190878511156124a657600080fd5b83870192505b848310156124c5578235825291830191908301906124ac565b979650505050505050565b60006001600160401b038211156124e9576124e961240b565b50601f01601f191660200190565b600082601f83011261250857600080fd5b813561251b612516826124d0565b612421565b81815284602083860101111561253057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561256557600080fd5b85356125708161235a565b945060208601356125808161235a565b935060408601356001600160401b038082111561259c57600080fd5b6125a889838a01612451565b945060608801359150808211156125be57600080fd5b6125ca89838a01612451565b935060808801359150808211156125e057600080fd5b506125ed888289016124f7565b9150509295509295909350565b6000806040838503121561260d57600080fd5b82356126188161235a565b946020939093013593505050565b60008083601f84011261263857600080fd5b5081356001600160401b0381111561264f57600080fd5b6020830191508360208260051b850101111561266a57600080fd5b9250929050565b60008060006040848603121561268657600080fd5b83356126918161235a565b925060208401356001600160401b038111156126ac57600080fd5b6126b886828701612626565b9497909650939450505050565b600080600080600060a086880312156126dd57600080fd5b85356126e88161235a565b945060208601356126f88161235a565b9350604086013592506060860135915060808601356001600160401b0381111561272157600080fd5b6125ed888289016124f7565b6000806000806060858703121561274357600080fd5b843561274e8161235a565b9350602085013561275e8161235a565b925060408501356001600160401b0381111561277957600080fd5b61278587828801612626565b95989497509550505050565b6000602082840312156127a357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127e8576127e86127c0565b5060010190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561281a57600080fd5b815180151581146122e057600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b81810381811115610379576103796127c0565b60005b8381101561287c578181015183820152602001612864565b50506000910152565b6000806040838503121561289857600080fd5b82516128a38161235a565b60208401519092506001600160401b038111156128bf57600080fd5b8301601f810185136128d057600080fd5b80516128de612516826124d0565b8181528660208385010111156128f357600080fd5b612904826020830160208601612861565b8093505050509250929050565b60008151808452612929816020860160208601612861565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a0608082018190526000906124c590830184612911565b600081518084526020808501945080840160005b838110156129a75781518752958201959082019060010161298b565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006129df60a0830185612977565b90508260808301529695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124c590830184612911565b60018060a01b0385168152836020820152826040820152608060608201526000610665608083018461297756fea264697066735822122067a78f827fb919b24e3bd901d1cdf3bd5463a411725d5f30f6e7547fb8ec775164736f6c63430008140033",
  "devdoc": {
    "details": "Router implementation with functions to interact with xDAI on Gnosis Chain.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract.",
          "_wrapped1155Factory": "Wrapped1155Factory contract."
        }
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral.",
          "conditionId": "The id of the condition used to redeem.",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection.",
          "parentCollectionId": "The Conditional Tokens parent collection id."
        },
        "returns": {
          "_0": "The token id."
        }
      },
      "getWinningOutcomes(bytes32)": {
        "params": {
          "conditionId": "The id of the condition."
        },
        "returns": {
          "_0": "An array of outcomes where a true value indicates that the outcome is redeemable."
        }
      },
      "mergePositions(address,address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of outcome tokens to merge.",
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to merge."
        }
      },
      "mergeToBase(address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "amount": "The amount of outcome tokens to merge.",
          "market": "The Market to merge."
        }
      },
      "redeemPositions(address,address,uint256[])": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to redeem.",
          "outcomeIndexes": "The index of the outcomes to redeem."
        }
      },
      "redeemToBase(address,uint256[])": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "market": "The Market to redeem.",
          "outcomeIndexes": "The index of the outcomes to redeem."
        }
      },
      "splitFromBase(address)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "market": "The Market to split."
        }
      },
      "splitPosition(address,address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of collateral to split.",
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to split."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "sDAI": {
        "details": "sDAI address."
      },
      "savingsXDaiAdapter": {
        "details": "SavingsXDaiAdapter address."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "notice": "Constructs a tokenId from a collateral token and an outcome collection."
      },
      "getWinningOutcomes(bytes32)": {
        "notice": "Helper function used to know the redeemable outcomes associated to a conditionId."
      },
      "mergePositions(address,address,uint256)": {
        "notice": "Merges positions and sends the collateral tokens to the user."
      },
      "mergeToBase(address,uint256)": {
        "notice": "Merges positions and sends xDAI to the user."
      },
      "redeemPositions(address,address,uint256[])": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "redeemToBase(address,uint256[])": {
        "notice": "Redeems positions and sends xDAI to the user."
      },
      "splitFromBase(address)": {
        "notice": "Splits a position using xDAI and sends the ERC20 outcome tokens back to the user."
      },
      "splitPosition(address,address,uint256)": {
        "notice": "Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}