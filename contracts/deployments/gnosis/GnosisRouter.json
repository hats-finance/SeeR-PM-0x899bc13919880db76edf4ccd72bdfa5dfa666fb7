{
  "address": "0xe94d6564Ec3C4918CF4401Fd7AC444C5c4837389",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergeToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savingsXDaiAdapter",
      "outputs": [
        {
          "internalType": "contract SavingsXDaiAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "splitFromBase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a5ac4d9302b7f3061d36ee91ca78f01005c7bf522cf69e0c100a72fb49baf40",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xe94d6564Ec3C4918CF4401Fd7AC444C5c4837389",
    "transactionIndex": 1,
    "gasUsed": "2554794",
    "logsBloom": "0x
    "blockHash": "0xaceba660f516cc5751b918c41fdd33f647edebf803ff85eefb4d36cbcfeff776",
    "transactionHash": "0x6a5ac4d9302b7f3061d36ee91ca78f01005c7bf522cf69e0c100a72fb49baf40",
    "logs": [],
    "blockNumber": 35756313,
    "cumulativeGasUsed": "2955351",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0x5bc8ddE5D07C6bf24911240AA6F9B0190ae3b557"
  ],
  "numDeployments": 8,
  "solcInputHash": "65df141202f1bca32209c0938ac7838b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savingsXDaiAdapter\",\"outputs\":[{\"internalType\":\"contract SavingsXDaiAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"splitFromBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Router implementation with functions to interact with xDAI on Gnosis Chain.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract\",\"_wrappedERC20Factory\":\"WrappedERC20Factory contract\"}},\"getTokenAddress(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral\",\"conditionId\":\"The id of the condition used to redeem\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral\",\"conditionId\":\"The id of the condition used to redeem\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"getWinningOutcomes(bytes32)\":{\"params\":{\"conditionId\":\"The id of the condition\"},\"returns\":{\"_0\":\"An array of outcomes where a true value indicates that the outcome is redeemable\"}},\"mergePositions(address,bytes32,bytes32,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20FactoryCollateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0))\",\"params\":{\"amount\":\"The amount of outcome tokens to merge\",\"collateralToken\":\"The address of the ERC20 used as collateral\",\"conditionId\":\"The id of the condition to merge\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"mergeToBase(bytes32,bytes32,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\",\"params\":{\"amount\":\"The amount of outcome tokens to merge\",\"conditionId\":\"The id of the condition to merge\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"redeemPositions(address,bytes32,bytes32,uint256[])\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0))\",\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral\",\"conditionId\":\"The id of the condition used to redeem\",\"indexSets\":\"The index sets of the outcomes to redeem\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"redeemToBase(bytes32,bytes32,uint256[])\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.\",\"params\":{\"conditionId\":\"The id of the condition used to redeem\",\"indexSets\":\"The index sets of the outcomes to redeem\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"splitFromBase(bytes32,bytes32)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\",\"params\":{\"conditionId\":\"The id of the condition to split\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"splitPosition(address,bytes32,bytes32,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrappedERC20FactoryCollateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0))\",\"params\":{\"amount\":\"The amount of collateral to split.\",\"collateralToken\":\"The address of the ERC20 used as collateral\",\"conditionId\":\"The id of the condition to split\",\"parentCollectionId\":\"The Conditional Tokens parent collection id\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenAddress(address,bytes32,bytes32,uint256)\":{\"notice\":\"Returns the address of the ERC-20 associated to the ERC-1155 outcome token.\"},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"notice\":\"Constructs a tokenId from a collateral token and an outcome collection.\"},\"getWinningOutcomes(bytes32)\":{\"notice\":\"Helper function used to know the redeemable outcomes associated to a conditionId.\"},\"mergePositions(address,bytes32,bytes32,uint256)\":{\"notice\":\"Merges positions and sends the collateral tokens to the user\"},\"mergeToBase(bytes32,bytes32,uint256)\":{\"notice\":\"Merges positions and sends xDAI to the user.\"},\"redeemPositions(address,bytes32,bytes32,uint256[])\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"redeemToBase(bytes32,bytes32,uint256[])\":{\"notice\":\"Redeems positions and sends xDAI to the user.\"},\"splitFromBase(bytes32,bytes32)\":{\"notice\":\"Splits a position using xDAI and sends the ERC20 outcome tokens back to the user\"},\"splitPosition(address,bytes32,bytes32,uint256)\":{\"notice\":\"Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GnosisRouter.sol\":\"GnosisRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/GnosisRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Router.sol\\\";\\n\\ninterface SavingsXDaiAdapter {\\n    function depositXDAI(address receiver) external payable returns (uint256);\\n\\n    function redeemXDAI(\\n        uint256 shares,\\n        address receiver\\n    ) external payable returns (uint256);\\n}\\n\\n/// @dev Router implementation with functions to interact with xDAI on Gnosis Chain.\\ncontract GnosisRouter is Router {\\n    IERC20 public constant sDAI =\\n        IERC20(0xaf204776c7245bF4147c2612BF6e5972Ee483701); // sDAI address\\n    SavingsXDaiAdapter public constant savingsXDaiAdapter =\\n        SavingsXDaiAdapter(0xD499b51fcFc66bd31248ef4b28d656d67E591A94); // SavingsXDaiAdapter address\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract\\n    /// @param _wrappedERC20Factory WrappedERC20Factory contract\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        WrappedERC20Factory _wrappedERC20Factory\\n    ) Router(_conditionalTokens, _wrappedERC20Factory) {}\\n\\n    /// @notice Splits a position using xDAI and sends the ERC20 outcome tokens back to the user\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to split\\n    function splitFromBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId\\n    ) external payable {\\n        uint256 shares = savingsXDaiAdapter.depositXDAI{value: msg.value}(\\n            address(this)\\n        );\\n\\n        _splitPosition(sDAI, parentCollectionId, conditionId, shares);\\n    }\\n\\n    /// @notice Merges positions and sends xDAI to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to merge\\n    /// @param amount The amount of outcome tokens to merge\\n    function mergeToBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint amount\\n    ) external {\\n        _mergePositions(sDAI, parentCollectionId, conditionId, amount);\\n\\n        sDAI.approve(address(savingsXDaiAdapter), amount);\\n        savingsXDaiAdapter.redeemXDAI(amount, msg.sender);\\n    }\\n\\n    /// @notice Redeems positions and sends xDAI to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition used to redeem\\n    /// @param indexSets The index sets of the outcomes to redeem\\n    function redeemToBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external {\\n        uint256 initialBalance = sDAI.balanceOf(address(this));\\n\\n        _redeemPositions(sDAI, parentCollectionId, conditionId, indexSets);\\n\\n        uint256 finalBalance = sDAI.balanceOf(address(this));\\n\\n        if (finalBalance > initialBalance) {\\n            sDAI.approve(\\n                address(savingsXDaiAdapter),\\n                finalBalance - initialBalance\\n            );\\n            savingsXDaiAdapter.redeemXDAI(\\n                finalBalance - initialBalance,\\n                msg.sender\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5de7f23efdbd568527815c2f043d20159bcd4181c8d3d4a3b2f53b1cf227dd0\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        uint256 max_previous\\n    ) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256);\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6dd1ae365738a869e5eaca1d0203ee76a763a21b77a96942fc50e1c3ee478bd5\",\"license\":\"MIT\"},\"src/Router.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IConditionalTokens, IERC20} from \\\"./Interfaces.sol\\\";\\n\\n/// @dev The Router contract replicates the main Conditional Tokens functions, but allowing to work with ERC20 outcomes instead of the ERC1155\\ncontract Router is ERC1155Holder {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    WrappedERC20Factory public immutable wrappedERC20Factory; // WrappedERC20Factory contract\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract\\n    /// @param _wrappedERC20Factory WrappedERC20Factory contract\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        WrappedERC20Factory _wrappedERC20Factory\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n    }\\n\\n    /// @notice Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\\n    /// @dev Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0))\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to split\\n    /// @param amount The amount of collateral to split.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint amount\\n    ) public {\\n        if (parentCollectionId == bytes32(0)) {\\n            // transfer the collateral tokens to the Router\\n            collateralToken.transferFrom(msg.sender, address(this), amount);\\n        }\\n        _splitPosition(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            amount\\n        );\\n    }\\n\\n    /// @notice Splits a position and sends the ERC20 outcome tokens to the user\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to split\\n    /// @param amount The amount of collateral to split\\n    function _splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint amount\\n    ) internal {\\n        uint256[] memory partition = getPartition(\\n            conditionalTokens.getOutcomeSlotCount(conditionId)\\n        );\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's splitting from a parent position, so we need to unwrap these tokens first\\n            // because they will be burnt to mint the child outcome tokens\\n            Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n                .wrapped1155Factory();\\n\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                parentCollectionId\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        } else {\\n            collateralToken.approve(address(conditionalTokens), amount);\\n        }\\n\\n        conditionalTokens.splitPosition(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n\\n        // wrap & transfer the minted outcome tokens\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // wrap to erc20\\n            conditionalTokens.safeTransferFrom(\\n                address(this),\\n                address(wrappedERC20Factory.wrapped1155Factory()),\\n                tokenId,\\n                amount,\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            // transfer the ERC20 back to the user\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Merges positions and sends the collateral tokens to the user\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory\\n    /// @dev Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0))\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to merge\\n    /// @param amount The amount of outcome tokens to merge\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint amount\\n    ) public {\\n        _mergePositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            amount\\n        );\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            // send collateral tokens back to the user\\n            collateralToken.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Merges positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition to merge\\n    /// @param amount The amount of outcome tokens to merge\\n    function _mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint amount\\n    ) internal {\\n        uint256[] memory partition = getPartition(\\n            conditionalTokens.getOutcomeSlotCount(conditionId)\\n        );\\n\\n        // we need to unwrap the outcome tokens because they will be burnt during the merge\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        conditionalTokens.mergePositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's merging from a parent position, so we need to wrap these tokens\\n            // and send them back to the user\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                parentCollectionId\\n            );\\n\\n            // wrap to erc20\\n            conditionalTokens.safeTransferFrom(\\n                address(this),\\n                address(wrappedERC20Factory.wrapped1155Factory()),\\n                tokenId,\\n                amount,\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            // transfer the ERC20 back to the user\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0))\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition used to redeem\\n    /// @param indexSets The index sets of the outcomes to redeem\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) public {\\n        uint256 initialBalance;\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            initialBalance = collateralToken.balanceOf(address(this));\\n        }\\n\\n        _redeemPositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n            if (finalBalance > initialBalance) {\\n                collateralToken.transfer(\\n                    msg.sender,\\n                    finalBalance - initialBalance\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Redeems positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition used to redeem\\n    /// @param indexSets The index sets of the outcomes to redeem\\n    function _redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) internal {\\n        uint256 tokenId = 0;\\n\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < indexSets.length; j++) {\\n            tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                indexSets[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            uint256 amount = wrapped1155.balanceOf(msg.sender);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        uint256 initialBalance = 0;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            tokenId = conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                parentCollectionId\\n            );\\n            initialBalance = conditionalTokens.balanceOf(\\n                address(this),\\n                tokenId\\n            );\\n        }\\n\\n        conditionalTokens.redeemPositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            uint256 finalBalance = conditionalTokens.balanceOf(\\n                address(this),\\n                tokenId\\n            );\\n\\n            if (finalBalance > initialBalance) {\\n                // wrap to erc20\\n                conditionalTokens.safeTransferFrom(\\n                    address(this),\\n                    address(wrappedERC20Factory.wrapped1155Factory()),\\n                    tokenId,\\n                    finalBalance - initialBalance,\\n                    wrappedERC20Factory.data(tokenId)\\n                );\\n\\n                IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n                // transfer the ERC20 back to the user\\n                wrapped1155.transfer(msg.sender, finalBalance - initialBalance);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a partition containing the full set of outcomes\\n    /// @param size Number of outcome slots\\n    /// @return The partition containing the full set of outcomes\\n    function getPartition(uint256 size) internal pure returns (uint256[] memory) {\\n        uint256[] memory partition = new uint256[](size);\\n\\n        for (uint i = 0; i < size; i++) {\\n            partition[i] = 1 << i;\\n        }\\n\\n        return partition;\\n    }\\n\\n    /// @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition used to redeem\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(\\n            parentCollectionId,\\n            conditionId,\\n            indexSet\\n        );\\n        return\\n            conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                collectionId\\n            );\\n    }\\n\\n    /// @notice Returns the address of the ERC-20 associated to the ERC-1155 outcome token.\\n    /// @param collateralToken The address of the ERC20 used as collateral\\n    /// @param parentCollectionId The Conditional Tokens parent collection id\\n    /// @param conditionId The id of the condition used to redeem\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection\\n    function getTokenAddress(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (IERC20) {\\n        return\\n            wrappedERC20Factory.tokens(\\n                getTokenId(\\n                    collateralToken,\\n                    parentCollectionId,\\n                    conditionId,\\n                    indexSet\\n                )\\n            );\\n    }\\n\\n    /// @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    /// @param conditionId The id of the condition\\n    /// @return An array of outcomes where a true value indicates that the outcome is redeemable\\n    function getWinningOutcomes(\\n        bytes32 conditionId\\n    ) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](\\n            conditionalTokens.getOutcomeSlotCount(conditionId)\\n        );\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0\\n                ? false\\n                : true;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5930b27ad98358ac7178b8486a0c31f119a5dd3d0595ae0c1d0677a19ad88ee4\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory; // Address of the Wrapped1155Factory implementation\\n\\n    mapping(uint256 => IERC20) public tokens; // Maps the ERC1155 tokenId to the ERC20 token\\n    mapping(uint256 => bytes) public data; // Token data associated to each tokenId\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @dev Encodes a short string (less than than 31 bytes long) as for storage as expected by Solidity.\\n    /// See https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    /// @param value String to encode\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    /// @dev Wraps an ERC1155 token to ERC20, with a custom name and symbol.\\n    /// @param multiToken ERC1155 token to wrap\\n    /// @param tokenId ERC1155 token ID\\n    /// @param tokenName Wrapped ERC20 name\\n    /// @param tokenSymbol Wrapped ERC20 symbol\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0xb3638b8550c2bcf30654402e6b327bb8aebf962e2431a89ee43c3adc81d1a600\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002f4438038062002f44833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051612d62620001e2600039600081816101fd01528181610b8801528181610e0101528181610ed601528181611060015281816113dc0152818161147d0152818161155e015281816116f8015281816117d1015281816118e801528181611b3501528181611bd701528181611cb001528181611df801528181611f2f01528181612046015281816122a401528181612346015261241f0152600081816101bc0152818161055b0152818161063201528181610720015281816107a50152818161103c01528181611178015281816112090152818161129901528181611329015281816113ac01528181611681015281816118c4015281816119f801528181611a8901528181611b0501528181611dbd01528181611e7e0152818161202201528181612155015281816121db01526122740152612d626000f3fe6080604052600436106100d35760003560e01c8063a3814b1d1161007a578063a3814b1d1461023f578063a88453d21461025f578063a9df011d1461027f578063abf7e2731461029f578063bc197c81146102c7578063bea36bba1461030c578063de8b61491461031f578063f23a6e611461034757600080fd5b806301b7037c146100d857806301ffc9a7146100fa57806302bd74c31461012f5780631a09424a1461015c5780635b8f8ea31461018a5780635bd9e299146101aa57806361371325146101eb5780639fe5158f1461021f575b600080fd5b3480156100e457600080fd5b506100f86100f3366004612607565b610373565b005b34801561010657600080fd5b5061011a610115366004612670565b610500565b60405190151581526020015b60405180910390f35b34801561013b57600080fd5b5061014f61014a3660046126a1565b610537565b60405161012691906126ba565b34801561016857600080fd5b5061017c610177366004612700565b6106ef565b604051908152602001610126565b34801561019657600080fd5b506100f86101a5366004612700565b610827565b3480156101b657600080fd5b506101de7f000000000000000000000000000000000000000000000000000000000000000081565b604051610126919061273b565b3480156101f757600080fd5b506101de7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022b57600080fd5b506100f861023a366004612700565b6108b1565b34801561024b57600080fd5b506100f861025a36600461274f565b610937565b34801561026b57600080fd5b506101de61027a366004612700565b610b84565b34801561028b57600080fd5b506100f861029a3660046127a1565b610c29565b3480156102ab57600080fd5b506101de73d499b51fcfc66bd31248ef4b28d656d67e591a9481565b3480156102d357600080fd5b506102f36102e236600461290f565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610126565b6100f861031a3660046129bc565b610d56565b34801561032b57600080fd5b506101de73af204776c7245bf4147c2612bf6e5972ee48370181565b34801561035357600080fd5b506102f36103623660046129de565b63f23a6e6160e01b95945050505050565b6000846103ec576040516370a0823160e01b81526001600160a01b038716906370a08231906103a690309060040161273b565b6020604051808303816000875af11580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190612a46565b90505b6103f98686868686610dfc565b846104f8576040516370a0823160e01b81526000906001600160a01b038816906370a082319061042d90309060040161273b565b6020604051808303816000875af115801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190612a46565b9050818111156104f6576001600160a01b03871663a9059cbb336104948585612a75565b6040518363ffffffff1660e01b81526004016104b1929190612a88565b6020604051808303816000875af11580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190612aa1565b505b505b505050505050565b60006001600160e01b03198216630271189760e51b148061053157506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa1580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190612a46565b6001600160401b038111156105dd576105dd6127cd565b604051908082528060200260200182016040528015610606578160200160208202803683370190505b50905060005b81518110156106e857604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190612a46565b156106b15760016106b4565b60005b8282815181106106c6576106c6612ac3565b91151560209283029190910190910152806106e081612ad9565b91505061060c565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190612a46565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906107dc9089908590600401612a88565b602060405180830381865afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190612a46565b9695505050505050565b6108338484848461165c565b826108ab5760405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906108669033908590600401612a88565b6020604051808303816000875af1158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612aa1565b505b50505050565b8261092b576040516323b872dd60e01b81526001600160a01b038516906323b872dd906108e690339030908690600401612af2565b6020604051808303816000875af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612aa1565b505b6108ab84848484611d98565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a082319061097190309060040161273b565b6020604051808303816000875af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190612a46565b90506109d773af204776c7245bf4147c2612bf6e5972ee48370186868686610dfc565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a1190309060040161273b565b6020604051808303816000875af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190612a46565b9050818111156104f85773af204776c7245bf4147c2612bf6e5972ee48370163095ea7b373d499b51fcfc66bd31248ef4b28d656d67e591a94610a978585612a75565b6040518363ffffffff1660e01b8152600401610ab4929190612a88565b6020604051808303816000875af1158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190612aa1565b5073d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610b1c8484612a75565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190612a46565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f64b2be610bc1878787876106ef565b6040518263ffffffff1660e01b8152600401610bdf91815260200190565b602060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190612b16565b95945050505050565b610c4973af204776c7245bf4147c2612bf6e5972ee48370184848461165c565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b390610c969073d499b51fcfc66bd31248ef4b28d656d67e591a94908590600401612a88565b6020604051808303816000875af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190612aa1565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af1158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190612a46565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b903490610d9290309060040161273b565b60206040518083038185885af1158015610db0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dd59190612a46565b9050610df773af204776c7245bf4147c2612bf6e5972ee483701848484611d98565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190612b16565b905060005b8381101561115857610eb2888888888886818110610ea657610ea6612ac3565b905060200201356106ef565b6040516327b2595f60e11b8152600481018290529093506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190612b16565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401610f71919061273b565b6020604051808303816000875af1158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612a46565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610fe790339030908690600401612af2565b6020604051808303816000875af1158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612aa1565b50836001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008784307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba84408c6040518263ffffffff1660e01b81526004016110ac91815260200190565b600060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f19190810190612b57565b6040518663ffffffff1660e01b8152600401611111959493929190612bf0565b600060405180830381600087803b15801561112b57600080fd5b505af115801561113f573d6000803e3d6000fd5b505050505050808061115090612ad9565b915050610e86565b50600086156112835760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906111af908b908b90600401612a88565b602060405180830381865afa1580156111cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f09190612a46565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061123f9030908790600401612a88565b602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190612a46565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c906112d6908b908b908b908b908b90600401612c2a565b600060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b5050881591506104f4905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061135f9030908890600401612a88565b602060405180830381865afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a09190612a46565b905081811115611651577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612b16565b876114678787612a75565b6040516303c2ea1160e61b8152600481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f0ba844090602401600060405180830381865afa1580156114cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f49190810190612b57565b6040518663ffffffff1660e01b8152600401611514959493929190612c84565b600060405180830381600087803b15801561152e57600080fd5b505af1158015611542573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101879052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa1580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612b16565b90506001600160a01b03811663a9059cbb336115ee8686612a75565b6040518363ffffffff1660e01b815260040161160b929190612a88565b6020604051808303816000875af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612aa1565b50505b505050505050505050565b604051636a16e06160e11b8152600481018390526000906116f2906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c2906024015b602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612a46565b61251d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117789190612b16565b905060005b82518110156119e05760006117ad8888888786815181106117a0576117a0612ac3565b60200260200101516106ef565b6040516327b2595f60e11b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190612b16565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd9061186f90339030908b90600401612af2565b6020604051808303816000875af115801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190612aa1565b50836001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008489307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba8440896040518263ffffffff1660e01b815260040161193491815260200190565b600060405180830381865afa158015611951573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119799190810190612b57565b6040518663ffffffff1660e01b8152600401611999959493929190612bf0565b600060405180830381600087803b1580156119b357600080fd5b505af11580156119c7573d6000803e3d6000fd5b50505050505080806119d890612ad9565b91505061177d565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad90611a359089908990899088908a90600401612cbe565b600060405180830381600087803b158015611a4f57600080fd5b505af1158015611a63573d6000803e3d6000fd5b5050861591506104f890505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611ac0908a908a90600401612a88565b602060405180830381865afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b019190612a46565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190612b16565b6040516303c2ea1160e61b815260048101869052859089906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0ba844090602401600060405180830381865afa158015611c1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c469190810190612b57565b6040518663ffffffff1660e01b8152600401611c66959493929190612c84565b600060405180830381600087803b158015611c8057600080fd5b505af1158015611c94573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101849052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612b16565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90611d559033908990600401612a88565b6020604051808303816000875af1158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612aa1565b604051636a16e06160e11b815260048101839052600090611dec906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c2906024016116ac565b905083156121315760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190612b16565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd753088886040518363ffffffff1660e01b8152600401611eca929190612a88565b602060405180830381865afa158015611ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0b9190612a46565b6040516327b2595f60e11b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a9190612b16565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90611fcd90339030908a90600401612af2565b6020604051808303816000875af1158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190612aa1565b50826001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008488307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba8440896040518263ffffffff1660e01b815260040161209291815260200190565b600060405180830381865afa1580156120af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120d79190810190612b57565b6040518663ffffffff1660e01b81526004016120f7959493929190612bf0565b600060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b505050505050506121c4565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061217f907f0000000000000000000000000000000000000000000000000000000000000000908690600401612a88565b6020604051808303816000875af115801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c29190612aa1565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce4275906122189088908890889087908990600401612cbe565b600060405180830381600087803b15801561223257600080fd5b505af1158015612246573d6000803e3d6000fd5b5050505060005b81518110156104f85760006122708787878686815181106117a0576117a0612ac3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123249190612b16565b6040516303c2ea1160e61b815260048101869052859089906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0ba844090602401600060405180830381865afa15801561238d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123b59190810190612b57565b6040518663ffffffff1660e01b81526004016123d5959493929190612c84565b600060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101849052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190612b16565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906124c49033908990600401612a88565b6020604051808303816000875af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190612aa1565b505050808061251590612ad9565b91505061224d565b60606000826001600160401b03811115612539576125396127cd565b604051908082528060200260200182016040528015612562578160200160208202803683370190505b50905060005b838110156106e857806001901b82828151811061258757612587612ac3565b60209081029190910101528061259c81612ad9565b915050612568565b6001600160a01b03811681146125b957600080fd5b50565b60008083601f8401126125ce57600080fd5b5081356001600160401b038111156125e557600080fd5b6020830191508360208260051b850101111561260057600080fd5b9250929050565b60008060008060006080868803121561261f57600080fd5b853561262a816125a4565b9450602086013593506040860135925060608601356001600160401b0381111561265357600080fd5b61265f888289016125bc565b969995985093965092949392505050565b60006020828403121561268257600080fd5b81356001600160e01b03198116811461269a57600080fd5b9392505050565b6000602082840312156126b357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156126f45783511515835292840192918401916001016126d6565b50909695505050505050565b6000806000806080858703121561271657600080fd5b8435612721816125a4565b966020860135965060408601359560600135945092505050565b6001600160a01b0391909116815260200190565b6000806000806060858703121561276557600080fd5b843593506020850135925060408501356001600160401b0381111561278957600080fd5b612795878288016125bc565b95989497509550505050565b6000806000606084860312156127b657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561280b5761280b6127cd565b604052919050565b600082601f83011261282457600080fd5b813560206001600160401b0382111561283f5761283f6127cd565b8160051b61284e8282016127e3565b928352848101820192828101908785111561286857600080fd5b83870192505b848310156128875782358252918301919083019061286e565b979650505050505050565b60006001600160401b038211156128ab576128ab6127cd565b50601f01601f191660200190565b600082601f8301126128ca57600080fd5b81356128dd6128d882612892565b6127e3565b8181528460208386010111156128f257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561292757600080fd5b8535612932816125a4565b94506020860135612942816125a4565b935060408601356001600160401b038082111561295e57600080fd5b61296a89838a01612813565b9450606088013591508082111561298057600080fd5b61298c89838a01612813565b935060808801359150808211156129a257600080fd5b506129af888289016128b9565b9150509295509295909350565b600080604083850312156129cf57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129f657600080fd5b8535612a01816125a4565b94506020860135612a11816125a4565b9350604086013592506060860135915060808601356001600160401b03811115612a3a57600080fd5b6129af888289016128b9565b600060208284031215612a5857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053157610531612a5f565b6001600160a01b03929092168252602082015260400190565b600060208284031215612ab357600080fd5b8151801515811461269a57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201612aeb57612aeb612a5f565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612b2857600080fd5b815161269a816125a4565b60005b83811015612b4e578181015183820152602001612b36565b50506000910152565b600060208284031215612b6957600080fd5b81516001600160401b03811115612b7f57600080fd5b8201601f81018413612b9057600080fd5b8051612b9e6128d882612892565b818152856020838501011115612bb357600080fd5b610c20826020830160208601612b33565b60008151808452612bdc816020860160208601612b33565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a06080820181905260009061288790830184612bc4565b6001600160a01b03861681526020810185905260408101849052608060608201819052810182905260006001600160fb1b03831115612c6857600080fd5b8260051b808560a08501379190910160a0019695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061288790830184612bc4565b6001600160a01b038616815260208082018690526040820185905260a06060830181905284519083018190526000918581019160c0850190845b81811015612d1457845183529383019391830191600101612cf8565b5050809350505050826080830152969550505050505056fea26469706673582212207654dacc63031adc14c52cce8946c72ce63750c258bfee7d81d16ab4d776b19964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100d35760003560e01c8063a3814b1d1161007a578063a3814b1d1461023f578063a88453d21461025f578063a9df011d1461027f578063abf7e2731461029f578063bc197c81146102c7578063bea36bba1461030c578063de8b61491461031f578063f23a6e611461034757600080fd5b806301b7037c146100d857806301ffc9a7146100fa57806302bd74c31461012f5780631a09424a1461015c5780635b8f8ea31461018a5780635bd9e299146101aa57806361371325146101eb5780639fe5158f1461021f575b600080fd5b3480156100e457600080fd5b506100f86100f3366004612607565b610373565b005b34801561010657600080fd5b5061011a610115366004612670565b610500565b60405190151581526020015b60405180910390f35b34801561013b57600080fd5b5061014f61014a3660046126a1565b610537565b60405161012691906126ba565b34801561016857600080fd5b5061017c610177366004612700565b6106ef565b604051908152602001610126565b34801561019657600080fd5b506100f86101a5366004612700565b610827565b3480156101b657600080fd5b506101de7f000000000000000000000000000000000000000000000000000000000000000081565b604051610126919061273b565b3480156101f757600080fd5b506101de7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022b57600080fd5b506100f861023a366004612700565b6108b1565b34801561024b57600080fd5b506100f861025a36600461274f565b610937565b34801561026b57600080fd5b506101de61027a366004612700565b610b84565b34801561028b57600080fd5b506100f861029a3660046127a1565b610c29565b3480156102ab57600080fd5b506101de73d499b51fcfc66bd31248ef4b28d656d67e591a9481565b3480156102d357600080fd5b506102f36102e236600461290f565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610126565b6100f861031a3660046129bc565b610d56565b34801561032b57600080fd5b506101de73af204776c7245bf4147c2612bf6e5972ee48370181565b34801561035357600080fd5b506102f36103623660046129de565b63f23a6e6160e01b95945050505050565b6000846103ec576040516370a0823160e01b81526001600160a01b038716906370a08231906103a690309060040161273b565b6020604051808303816000875af11580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190612a46565b90505b6103f98686868686610dfc565b846104f8576040516370a0823160e01b81526000906001600160a01b038816906370a082319061042d90309060040161273b565b6020604051808303816000875af115801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190612a46565b9050818111156104f6576001600160a01b03871663a9059cbb336104948585612a75565b6040518363ffffffff1660e01b81526004016104b1929190612a88565b6020604051808303816000875af11580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190612aa1565b505b505b505050505050565b60006001600160e01b03198216630271189760e51b148061053157506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa1580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190612a46565b6001600160401b038111156105dd576105dd6127cd565b604051908082528060200260200182016040528015610606578160200160208202803683370190505b50905060005b81518110156106e857604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190612a46565b156106b15760016106b4565b60005b8282815181106106c6576106c6612ac3565b91151560209283029190910190910152806106e081612ad9565b91505061060c565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190612a46565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906107dc9089908590600401612a88565b602060405180830381865afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190612a46565b9695505050505050565b6108338484848461165c565b826108ab5760405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906108669033908590600401612a88565b6020604051808303816000875af1158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190612aa1565b505b50505050565b8261092b576040516323b872dd60e01b81526001600160a01b038516906323b872dd906108e690339030908690600401612af2565b6020604051808303816000875af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612aa1565b505b6108ab84848484611d98565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a082319061097190309060040161273b565b6020604051808303816000875af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190612a46565b90506109d773af204776c7245bf4147c2612bf6e5972ee48370186868686610dfc565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a1190309060040161273b565b6020604051808303816000875af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190612a46565b9050818111156104f85773af204776c7245bf4147c2612bf6e5972ee48370163095ea7b373d499b51fcfc66bd31248ef4b28d656d67e591a94610a978585612a75565b6040518363ffffffff1660e01b8152600401610ab4929190612a88565b6020604051808303816000875af1158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190612aa1565b5073d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610b1c8484612a75565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190612a46565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f64b2be610bc1878787876106ef565b6040518263ffffffff1660e01b8152600401610bdf91815260200190565b602060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190612b16565b95945050505050565b610c4973af204776c7245bf4147c2612bf6e5972ee48370184848461165c565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b390610c969073d499b51fcfc66bd31248ef4b28d656d67e591a94908590600401612a88565b6020604051808303816000875af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd99190612aa1565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af1158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190612a46565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b903490610d9290309060040161273b565b60206040518083038185885af1158015610db0573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dd59190612a46565b9050610df773af204776c7245bf4147c2612bf6e5972ee483701848484611d98565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190612b16565b905060005b8381101561115857610eb2888888888886818110610ea657610ea6612ac3565b905060200201356106ef565b6040516327b2595f60e11b8152600481018290529093506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190612b16565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401610f71919061273b565b6020604051808303816000875af1158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190612a46565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610fe790339030908690600401612af2565b6020604051808303816000875af1158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190612aa1565b50836001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008784307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba84408c6040518263ffffffff1660e01b81526004016110ac91815260200190565b600060405180830381865afa1580156110c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f19190810190612b57565b6040518663ffffffff1660e01b8152600401611111959493929190612bf0565b600060405180830381600087803b15801561112b57600080fd5b505af115801561113f573d6000803e3d6000fd5b505050505050808061115090612ad9565b915050610e86565b50600086156112835760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906111af908b908b90600401612a88565b602060405180830381865afa1580156111cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f09190612a46565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061123f9030908790600401612a88565b602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190612a46565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c906112d6908b908b908b908b908b90600401612c2a565b600060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b5050881591506104f4905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061135f9030908890600401612a88565b602060405180830381865afa15801561137c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a09190612a46565b905081811115611651577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612b16565b876114678787612a75565b6040516303c2ea1160e61b8152600481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f0ba844090602401600060405180830381865afa1580156114cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f49190810190612b57565b6040518663ffffffff1660e01b8152600401611514959493929190612c84565b600060405180830381600087803b15801561152e57600080fd5b505af1158015611542573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101879052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa1580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612b16565b90506001600160a01b03811663a9059cbb336115ee8686612a75565b6040518363ffffffff1660e01b815260040161160b929190612a88565b6020604051808303816000875af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612aa1565b50505b505050505050505050565b604051636a16e06160e11b8152600481018390526000906116f2906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c2906024015b602060405180830381865afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190612a46565b61251d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117789190612b16565b905060005b82518110156119e05760006117ad8888888786815181106117a0576117a0612ac3565b60200260200101516106ef565b6040516327b2595f60e11b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190612b16565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd9061186f90339030908b90600401612af2565b6020604051808303816000875af115801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190612aa1565b50836001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008489307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba8440896040518263ffffffff1660e01b815260040161193491815260200190565b600060405180830381865afa158015611951573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119799190810190612b57565b6040518663ffffffff1660e01b8152600401611999959493929190612bf0565b600060405180830381600087803b1580156119b357600080fd5b505af11580156119c7573d6000803e3d6000fd5b50505050505080806119d890612ad9565b91505061177d565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad90611a359089908990899088908a90600401612cbe565b600060405180830381600087803b158015611a4f57600080fd5b505af1158015611a63573d6000803e3d6000fd5b5050861591506104f890505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611ac0908a908a90600401612a88565b602060405180830381865afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b019190612a46565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190612b16565b6040516303c2ea1160e61b815260048101869052859089906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0ba844090602401600060405180830381865afa158015611c1e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c469190810190612b57565b6040518663ffffffff1660e01b8152600401611c66959493929190612c84565b600060405180830381600087803b158015611c8057600080fd5b505af1158015611c94573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101849052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612b16565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90611d559033908990600401612a88565b6020604051808303816000875af1158015611d74573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612aa1565b604051636a16e06160e11b815260048101839052600090611dec906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c2906024016116ac565b905083156121315760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190612b16565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd753088886040518363ffffffff1660e01b8152600401611eca929190612a88565b602060405180830381865afa158015611ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0b9190612a46565b6040516327b2595f60e11b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634f64b2be90602401602060405180830381865afa158015611f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9a9190612b16565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90611fcd90339030908a90600401612af2565b6020604051808303816000875af1158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190612aa1565b50826001600160a01b03166352aecb247f00000000000000000000000000000000000000000000000000000000000000008488307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f0ba8440896040518263ffffffff1660e01b815260040161209291815260200190565b600060405180830381865afa1580156120af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120d79190810190612b57565b6040518663ffffffff1660e01b81526004016120f7959493929190612bf0565b600060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b505050505050506121c4565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061217f907f0000000000000000000000000000000000000000000000000000000000000000908690600401612a88565b6020604051808303816000875af115801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c29190612aa1565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce4275906122189088908890889087908990600401612cbe565b600060405180830381600087803b15801561223257600080fd5b505af1158015612246573d6000803e3d6000fd5b5050505060005b81518110156104f85760006122708787878686815181106117a0576117a0612ac3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f242432a307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663150c5b976040518163ffffffff1660e01b8152600401602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123249190612b16565b6040516303c2ea1160e61b815260048101869052859089906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f0ba844090602401600060405180830381865afa15801561238d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123b59190810190612b57565b6040518663ffffffff1660e01b81526004016123d5959493929190612c84565b600060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b50506040516327b2595f60e11b815260048101849052600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150634f64b2be90602401602060405180830381865afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190612b16565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906124c49033908990600401612a88565b6020604051808303816000875af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190612aa1565b505050808061251590612ad9565b91505061224d565b60606000826001600160401b03811115612539576125396127cd565b604051908082528060200260200182016040528015612562578160200160208202803683370190505b50905060005b838110156106e857806001901b82828151811061258757612587612ac3565b60209081029190910101528061259c81612ad9565b915050612568565b6001600160a01b03811681146125b957600080fd5b50565b60008083601f8401126125ce57600080fd5b5081356001600160401b038111156125e557600080fd5b6020830191508360208260051b850101111561260057600080fd5b9250929050565b60008060008060006080868803121561261f57600080fd5b853561262a816125a4565b9450602086013593506040860135925060608601356001600160401b0381111561265357600080fd5b61265f888289016125bc565b969995985093965092949392505050565b60006020828403121561268257600080fd5b81356001600160e01b03198116811461269a57600080fd5b9392505050565b6000602082840312156126b357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156126f45783511515835292840192918401916001016126d6565b50909695505050505050565b6000806000806080858703121561271657600080fd5b8435612721816125a4565b966020860135965060408601359560600135945092505050565b6001600160a01b0391909116815260200190565b6000806000806060858703121561276557600080fd5b843593506020850135925060408501356001600160401b0381111561278957600080fd5b612795878288016125bc565b95989497509550505050565b6000806000606084860312156127b657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561280b5761280b6127cd565b604052919050565b600082601f83011261282457600080fd5b813560206001600160401b0382111561283f5761283f6127cd565b8160051b61284e8282016127e3565b928352848101820192828101908785111561286857600080fd5b83870192505b848310156128875782358252918301919083019061286e565b979650505050505050565b60006001600160401b038211156128ab576128ab6127cd565b50601f01601f191660200190565b600082601f8301126128ca57600080fd5b81356128dd6128d882612892565b6127e3565b8181528460208386010111156128f257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561292757600080fd5b8535612932816125a4565b94506020860135612942816125a4565b935060408601356001600160401b038082111561295e57600080fd5b61296a89838a01612813565b9450606088013591508082111561298057600080fd5b61298c89838a01612813565b935060808801359150808211156129a257600080fd5b506129af888289016128b9565b9150509295509295909350565b600080604083850312156129cf57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129f657600080fd5b8535612a01816125a4565b94506020860135612a11816125a4565b9350604086013592506060860135915060808601356001600160401b03811115612a3a57600080fd5b6129af888289016128b9565b600060208284031215612a5857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053157610531612a5f565b6001600160a01b03929092168252602082015260400190565b600060208284031215612ab357600080fd5b8151801515811461269a57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201612aeb57612aeb612a5f565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612b2857600080fd5b815161269a816125a4565b60005b83811015612b4e578181015183820152602001612b36565b50506000910152565b600060208284031215612b6957600080fd5b81516001600160401b03811115612b7f57600080fd5b8201601f81018413612b9057600080fd5b8051612b9e6128d882612892565b818152856020838501011115612bb357600080fd5b610c20826020830160208601612b33565b60008151808452612bdc816020860160208601612b33565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a06080820181905260009061288790830184612bc4565b6001600160a01b03861681526020810185905260408101849052608060608201819052810182905260006001600160fb1b03831115612c6857600080fd5b8260051b808560a08501379190910160a0019695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061288790830184612bc4565b6001600160a01b038616815260208082018690526040820185905260a06060830181905284519083018190526000918581019160c0850190845b81811015612d1457845183529383019391830191600101612cf8565b5050809350505050826080830152969550505050505056fea26469706673582212207654dacc63031adc14c52cce8946c72ce63750c258bfee7d81d16ab4d776b19964736f6c63430008140033",
  "devdoc": {
    "details": "Router implementation with functions to interact with xDAI on Gnosis Chain.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract",
          "_wrappedERC20Factory": "WrappedERC20Factory contract"
        }
      },
      "getTokenAddress(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral",
          "conditionId": "The id of the condition used to redeem",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral",
          "conditionId": "The id of the condition used to redeem",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "getWinningOutcomes(bytes32)": {
        "params": {
          "conditionId": "The id of the condition"
        },
        "returns": {
          "_0": "An array of outcomes where a true value indicates that the outcome is redeemable"
        }
      },
      "mergePositions(address,bytes32,bytes32,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20FactoryCollateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0))",
        "params": {
          "amount": "The amount of outcome tokens to merge",
          "collateralToken": "The address of the ERC20 used as collateral",
          "conditionId": "The id of the condition to merge",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "mergeToBase(bytes32,bytes32,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory",
        "params": {
          "amount": "The amount of outcome tokens to merge",
          "conditionId": "The id of the condition to merge",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "redeemPositions(address,bytes32,bytes32,uint256[])": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0))",
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral",
          "conditionId": "The id of the condition used to redeem",
          "indexSets": "The index sets of the outcomes to redeem",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "redeemToBase(bytes32,bytes32,uint256[])": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory.",
        "params": {
          "conditionId": "The id of the condition used to redeem",
          "indexSets": "The index sets of the outcomes to redeem",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "splitFromBase(bytes32,bytes32)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20Factory",
        "params": {
          "conditionId": "The id of the condition to split",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "splitPosition(address,bytes32,bytes32,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrappedERC20FactoryCollateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0))",
        "params": {
          "amount": "The amount of collateral to split.",
          "collateralToken": "The address of the ERC20 used as collateral",
          "conditionId": "The id of the condition to split",
          "parentCollectionId": "The Conditional Tokens parent collection id"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenAddress(address,bytes32,bytes32,uint256)": {
        "notice": "Returns the address of the ERC-20 associated to the ERC-1155 outcome token."
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "notice": "Constructs a tokenId from a collateral token and an outcome collection."
      },
      "getWinningOutcomes(bytes32)": {
        "notice": "Helper function used to know the redeemable outcomes associated to a conditionId."
      },
      "mergePositions(address,bytes32,bytes32,uint256)": {
        "notice": "Merges positions and sends the collateral tokens to the user"
      },
      "mergeToBase(bytes32,bytes32,uint256)": {
        "notice": "Merges positions and sends xDAI to the user."
      },
      "redeemPositions(address,bytes32,bytes32,uint256[])": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "redeemToBase(bytes32,bytes32,uint256[])": {
        "notice": "Redeems positions and sends xDAI to the user."
      },
      "splitFromBase(bytes32,bytes32)": {
        "notice": "Splits a position using xDAI and sends the ERC20 outcome tokens back to the user"
      },
      "splitPosition(address,bytes32,bytes32,uint256)": {
        "notice": "Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}